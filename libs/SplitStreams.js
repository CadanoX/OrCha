(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory(require('d3'));
  else if (typeof define === 'function' && define.amd) define(['d3'], factory);
  else if (typeof exports === 'object')
    exports['SplitStreams'] = factory(require('d3'));
  else root['SplitStreams'] = factory(root['d3']);
})(window, function(__WEBPACK_EXTERNAL_MODULE_d3__) {
  return /******/ (function(modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {}; // The require function
    /******/
    /******/ /******/ function __webpack_require__(moduleId) {
      /******/
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId]) {
        /******/ return installedModules[moduleId].exports;
        /******/
      } // Create a new module (and put it into the cache)
      /******/ /******/ var module = (installedModules[moduleId] = {
        /******/ i: moduleId,
        /******/ l: false,
        /******/ exports: {}
        /******/
      }); // Execute the module function
      /******/
      /******/ /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      ); // Flag the module as loaded
      /******/
      /******/ /******/ module.l = true; // Return the exports of the module
      /******/
      /******/ /******/ return module.exports;
      /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/ __webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
    /******/
    /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
      /******/ if (!__webpack_require__.o(exports, name)) {
        /******/ Object.defineProperty(exports, name, {
          enumerable: true,
          get: getter
        });
        /******/
      }
      /******/
    }; // define __esModule on exports
    /******/
    /******/ /******/ __webpack_require__.r = function(exports) {
      /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module'
        });
        /******/
      }
      /******/ Object.defineProperty(exports, '__esModule', { value: true });
      /******/
    }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
    /******/
    /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function(
      value,
      mode
    ) {
      /******/ if (mode & 1) value = __webpack_require__(value);
      /******/ if (mode & 8) return value;
      /******/ if (
        mode & 4 &&
        typeof value === 'object' &&
        value &&
        value.__esModule
      )
        return value;
      /******/ var ns = Object.create(null);
      /******/ __webpack_require__.r(ns);
      /******/ Object.defineProperty(ns, 'default', {
        enumerable: true,
        value: value
      });
      /******/ if (mode & 2 && typeof value != 'string')
        for (var key in value)
          __webpack_require__.d(
            ns,
            key,
            function(key) {
              return value[key];
            }.bind(null, key)
          );
      /******/ return ns;
      /******/
    }; // getDefaultExport function for compatibility with non-harmony modules
    /******/
    /******/ /******/ __webpack_require__.n = function(module) {
      /******/ var getter =
        module && module.__esModule
          ? /******/ function getDefault() {
              return module['default'];
            }
          : /******/ function getModuleExports() {
              return module;
            };
      /******/ __webpack_require__.d(getter, 'a', getter);
      /******/ return getter;
      /******/
    }; // Object.prototype.hasOwnProperty.call
    /******/
    /******/ /******/ __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    }; // __webpack_public_path__
    /******/
    /******/ /******/ __webpack_require__.p = ''; // Load entry module and return exports
    /******/
    /******/
    /******/ /******/ return __webpack_require__(
      (__webpack_require__.s = './src/lib.js')
    );
    /******/
  })(
    /************************************************************************/
    /******/ {
      /***/ './css/SplitStream.css':
        /*!*****************************!*\
  !*** ./css/SplitStream.css ***!
  \*****************************/
        /*! no static exports found */
        /***/ function(module, exports, __webpack_require__) {
          eval(
            'var content = __webpack_require__(/*! !../node_modules/css-loader/dist/cjs.js!./SplitStream.css */ "./node_modules/css-loader/dist/cjs.js!./css/SplitStream.css");\n\nif (typeof content === \'string\') {\n  content = [[module.i, content, \'\']];\n}\n\nvar options = {}\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = __webpack_require__(/*! ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9jc3MvU3BsaXRTdHJlYW0uY3NzPzA3ZjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLDhIQUE0RDs7QUFFbEY7QUFDQSxjQUFjLFFBQVM7QUFDdkI7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsbUpBQXdFOztBQUU3RjtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9jc3MvU3BsaXRTdHJlYW0uY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NwbGl0U3RyZWFtLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./css/SplitStream.css\n'
          );

          /***/
        },

      /***/ './libs/d3svgfilters/src/d3-svg-filters.js':
        /*!*************************************************!*\
  !*** ./libs/d3svgfilters/src/d3-svg-filters.js ***!
  \*************************************************/
        /*! no static exports found */
        /***/ function(module, exports, __webpack_require__) {
          eval(
            "const d3 =  true ? __webpack_require__(/*! d3 */ \"d3\") : undefined;\r\n\r\nclass SVGFilter {\r\n  constructor(spec) {}\r\n\r\n  set id(id) {\r\n    this._id = id;\r\n  }\r\n  get id() {\r\n    return this._id;\r\n  }\r\n}\r\n\r\nclass SVGFilterManagerLibrary {\r\n  constructor() {\r\n    this._library = {}; // name : { generate: (defs) => (args) => {  appends filter to defs }, signature: (args) => key}\r\n  }\r\n\r\n  static GenerateID() {\r\n    if (!this.__ID) this.__ID = 0;\r\n\r\n    return ++this.__ID;\r\n  }\r\n\r\n  addFilter(name, fns) {\r\n    this._library[name] = fns;\r\n  }\r\n\r\n  signature(filterName, args) {\r\n    return this._library[filterName]\r\n      .signature(args)\r\n      .replace(/\\:|\\,|\\.|\\;/g, '_')\r\n      .replace(/ /g, '')\r\n      .replace(/\\#/g, 'h')\r\n      .replace(/\\(/g, 'l')\r\n      .replace(/\\)/g, 'r');\r\n  }\r\n\r\n  generate(defs, filterName, args) {\r\n    const signature = this.signature(filterName, args);\r\n    const ctx = { signature, defs };\r\n    const theFilter = this._library[filterName].generate.call(ctx, {\r\n      ...args,\r\n      id: SVGFilterManagerLibrary.GenerateID()\r\n    });\r\n\r\n    defs.node().__filters__.push({ signature, filter: theFilter });\r\n  }\r\n\r\n  static Suffix() {\r\n    if (!this._suffix) this._suffix = 0;\r\n    return this._suffix++;\r\n  }\r\n\r\n  makeUnique(filterText) {\r\n    const varNames = /result=(.+?)/g.test(filterText);\r\n  }\r\n}\r\n\r\nconst GenSVGFilters = (...filters) => {};\r\n\r\nconst Lib = new SVGFilterManagerLibrary();\r\nLib.addFilter('drop-shadow', {\r\n  generate: function({ color, dx, dy, blur }) {\r\n    const key = this.signature;\r\n    const existing = this.defs.select(`#${key}`);\r\n\r\n    if (!existing.empty()) return existing;\r\n\r\n    const theDropShadow = this.defs.html(\r\n      this.defs.html() +\r\n        `\r\n            <feDropShadow\r\n                id='${key}'\r\n                dx='${dx}'\r\n                dy='${dy}'\r\n                stdDeviation='${blur}'\r\n                flood-color=${color} />\r\n        `\r\n    );\r\n\r\n    return theDropShadow;\r\n  },\r\n  signature: ({ color, dx, dy, blur }) => `ds_${color}_${blur}_${dx}_${dy}`\r\n});\r\n\r\nLib.addFilter('blur', {\r\n  generate: function({ blur }) {\r\n    const key = this.signature;\r\n    const existing = this.defs.select(`#${key}`);\r\n\r\n    if (!existing.empty()) return existing;\r\n\r\n    const theBlur = this.defs\r\n      .append('feGaussianBlur')\r\n      .attr('stdDeviation', blur);\r\n\r\n    return theBlur;\r\n  },\r\n  signature: ({ blur }) => `gbl_${blur}`\r\n});\r\n\r\nLib.addFilter('inner-shadow', {\r\n  generate: function({ id, color, dx, dy, blur }) {\r\n    const key = this.signature;\r\n    const existing = this.defs.select(`#${key}`);\r\n\r\n    if (!existing.empty()) return existing;\r\n\r\n    this.defs.html(\r\n      this.defs.html() +\r\n        `\r\n            <feGaussianBlur\r\n                in='SourceAlpha'\r\n                stdDeviation='${blur}'\r\n                result='blur${id}' />\r\n\r\n            <feOffset dx=${dx} dy=${dy} />\r\n\r\n            <feComposite\r\n                in2='SourceAlpha'\r\n                operator='arithmetic'\r\n                k2=-1\r\n                k3=1\r\n                result='shadowDiff${id}' />\r\n\r\n            <feFlood flood-color=${color} />\r\n\r\n            <feComposite\r\n                in2='shadowDiff${id}'\r\n                operator='in' />\r\n\r\n            <feComposite\r\n                in2='SourceGraphic'\r\n                operator='over'\r\n                result='firstFilter${id}' />\r\n\r\n            <feComposite\r\n                in2='shadowDiff${id}'\r\n                operator='in' />\r\n\r\n            <feComposite\r\n                in2='firstFilter${id}'\r\n                operator='over' />\r\n        `\r\n    );\r\n  },\r\n  signature: ({ color, dx, dy, blur }) => `ids_${color}_${blur}_${dx}_${dy}`\r\n});\r\n\r\nLib.addFilter('double-inner-shadow', {\r\n  generate: function({ id, color, dx, dy, blur }) {\r\n    const key = this.signature;\r\n    const existing = this.defs.select(`#${key}`);\r\n\r\n    if (!existing.empty()) return existing;\r\n\r\n    this.defs.html(\r\n      this.defs.html() +\r\n        `\r\n            <feComponentTransfer in=SourceAlpha result=\"invert${id}\">\r\n                <feFuncA type=\"table\" tableValues=\"1 0\" />\r\n            </feComponentTransfer>\r\n            <feGaussianBlur in=\"invert${id}\" stdDeviation=\"${blur}\" result=\"blur${id}\"/>\r\n            <feOffset in=\"blur${id}\" dx=\"${dx}\" dy=\"${dy}\" result=\"offsetblur1${id}\"/>\r\n            <feOffset in=\"blur${id}\" dy=\"${-dy}\" result=\"offsetblur2${id}\"/>\r\n            <feFlood flood-color=\"${color}\"/> \r\n            <feComposite in2=\"offsetblur1${id}\" operator=\"in\" result=\"offsetblur1cut${id}\"/>\r\n            <feFlood flood-color=\"${color}\"/> \r\n            <feComposite in2=\"offsetblur2${id}\" operator=\"in\" result=\"offsetblur2cut${id}\"/>\r\n            <feMerge>\r\n                <feMergeNode in=\"SourceGraphic\" />\r\n                <feMergeNode in=\"offsetblur1${id}\" />\r\n                <feMergeNode in=\"offsetblur2${id}\" />\r\n            </feMerge>\r\n            <feComposite in2=\"SourceAlpha\" operator=\"in\" />\r\n        `\r\n    );\r\n  },\r\n  signature: ({ color, dx, dy, blur }) => `dids_${color}_${blur}_${dx}_${dy}`\r\n});\r\n\r\nclass SVGFilterManager {\r\n  constructor(defs) {\r\n    this._filters = {\r\n      boxShadow: {}\r\n    }; // Type : filterKey : id\r\n\r\n    this._defs = defs;\r\n    this._ids = {};\r\n\r\n    this._bindings = {}; // id : [DOMNode]\r\n  }\r\n\r\n  _bind(selection, id) {\r\n    const bindings = this._bindings[id];\r\n\r\n    selection.each(function(d, i) {\r\n      bindings.push(this);\r\n    });\r\n  }\r\n\r\n  _unbind(selection, id) {\r\n    const bindings = this._bindings[id];\r\n\r\n    const toRemove = [];\r\n    selection.each(function(d, i) {\r\n      toRemove.push(this);\r\n    });\r\n\r\n    bindings[id] = bindings.filter(node => !toRemove.includes(node));\r\n\r\n    if (bindings[id].length === 0) this._deleteFilter(id);\r\n  }\r\n\r\n  _deleteFilter(id) {\r\n    let toDelete;\r\n    Object.entries(this._ids).forEach(([signature, theID]) => {\r\n      if (theID === id) {\r\n        toDelete = signature;\r\n        return false;\r\n      }\r\n    });\r\n\r\n    delete this._ids[toDelete];\r\n    delete this._bindings[id];\r\n    this._defs.select('#' + id).remove();\r\n  }\r\n\r\n  hasFilter(signature) {\r\n    return !!this._ids[signature];\r\n    // return !this._defs.select('#' + signature).empty();\r\n  }\r\n\r\n  signature(...args) {\r\n    // ['name', arg, 'name2', arg]\r\n    // ['', ]\r\n    return (\r\n      'F_' +\r\n      args\r\n        .map((arg, i) => (i % 2 === 0 ? '' : Lib.signature(args[i - 1], arg)))\r\n        .filter(v => v !== '')\r\n        .join('_')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a filter from the list of filters in the format\r\n   * (filter-name-1, args1, filter-name-2, args2, ... , filter-name-N, argsN)\r\n   *\r\n   * @param {*} args\r\n   * @memberof SVGFilterManager\r\n   */\r\n  createFilter(...args) {\r\n    // 1. Compute signature and see if it already exists\r\n    const signature = this.signature(...args);\r\n\r\n    if (this.hasFilter(signature)) return this.getFilterID(signature);\r\n\r\n    const theID = (this._ids[signature] = SVGFilterManager._genID());\r\n    this._bindings[theID] = [];\r\n\r\n    const filterEntry = this._defs\r\n      .append('filter')\r\n      .attr('id', theID)\r\n      .attr('height', '300%')\r\n      .attr('width', '300%')\r\n      .attr('x', '-100%')\r\n      .attr('y', '-100%');\r\n\r\n    filterEntry.node().__filters__ = [];\r\n\r\n    args.forEach((arg, i) => {\r\n      if (i % 2 === 0) return Lib.generate(filterEntry, arg, args[i + 1]);\r\n    });\r\n\r\n    return theID;\r\n  }\r\n\r\n  static _genID() {\r\n    if (!this.__idc__) this.__idc__ = 0;\r\n    return `FILTER_${this.__idc__++}`;\r\n  }\r\n\r\n  // _genID() {\r\n  // }\r\n\r\n  getFilterID(signature) {\r\n    return this._ids[signature];\r\n  }\r\n}\r\n\r\nd3.selection.prototype.svgFilter = function(...filters) {\r\n  // name, args, name1, args1, ... ,nameN, argsN\r\n  // If no defs entry, generate one at the root and set it @ the svg filter manager\r\n  // create a new svg filter manager for that svg\r\n\r\n  // 1. Find topmost SVG\r\n  // let svg = d3.select(this.node().farthestViewportElement || this.node().closest('svg'));\r\n\r\n  // // 2. Ensure the defs entry exists\r\n  // let defs = svg.select(':scope>defs.svg-custom-filters');\r\n  // if (defs.empty()) {\r\n  //     defs = svg.append('defs').attr('class', 'svg-custom-filters');\r\n  //     defs.node()._svgFilterManager = new SVGFilterManager(defs);\r\n  // }\r\n\r\n  const defs = this.svgFilterDefs();\r\n\r\n  const filterManager = defs.node()._svgFilterManager;\r\n  const filterID = filterManager.createFilter(...filters);\r\n\r\n  this.each(function(d) {\r\n    const sel = d3.select(this);\r\n    if (filterID === sel.getFilterID()) return;\r\n    sel.clearFilter();\r\n\r\n    sel.attr('filter', `url(#${filterID})`);\r\n    filterManager._bind(sel, filterID);\r\n  });\r\n\r\n  // 3. Generate a filter manager if not existing\r\n\r\n  // TheFilterManager._defs;\r\n  // const ids = GenSVGFilters(filters);\r\n};\r\n\r\nd3.selection.prototype.svgFilterDefs = function() {\r\n  // 1. Find topmost SVG\r\n  let svg = d3.select(\r\n    this.node().farthestViewportElement || this.node().closest('svg')\r\n  );\r\n\r\n  // 2. Ensure the defs entry exists\r\n  let defs = svg.select(':scope>defs.svg-custom-filters');\r\n  if (defs.empty()) {\r\n    defs = svg.append('defs').attr('class', 'svg-custom-filters');\r\n    defs.node()._svgFilterManager = new SVGFilterManager(defs);\r\n  }\r\n\r\n  return defs;\r\n};\r\n\r\nd3.selection.prototype.getFilterID = function() {\r\n  const filterAttr = this.attr('filter');\r\n\r\n  let filterID;\r\n  if (!!filterAttr) filterID = /\\(\\#(.+)\\)/.exec(filterAttr)[1];\r\n\r\n  return filterID;\r\n};\r\n\r\nd3.selection.prototype.clearFilter = function() {\r\n  this.each(function(d, i) {\r\n    const sel = d3.select(this);\r\n    const filterID = sel.getFilterID();\r\n    if (!filterID) return;\r\n\r\n    const defs = sel.svgFilterDefs();\r\n    const filterManager = defs.node()._svgFilterManager;\r\n\r\n    sel.attr('filter', null);\r\n    filterManager._unbind(sel, filterID);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nd3.svgFilterLib = Lib;\r\n\r\n// const originalRemove = d3.selection.prototype.remove;\r\n// d3.selection.prototype.remove = function () { // Add in clear filter to remove fn!\r\n//     this.selectAll('*').clearFilter();\r\n//     originalRemove.call(this, ...arguments);\r\n// }\r\n\r\n// d3.svgFilter = (name, args) => lib.filter(name)(args);\r\n\r\n// Example usage\r\nconst selection = {};\r\n\r\n// selection\r\n//     .svgFilter(\r\n//         d3.svgFilterBoxShadow({\r\n//             dx: '5%',\r\n//             dy: '5%',\r\n//             blur: '25%'\r\n//         }),\r\n//         d3.svgFilterBoxShadowInset({\r\n//             dx: '5%',\r\n//             dy: '5%',\r\n//             blur: '25%'\r\n//         })\r\n//     );\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/d3svgfilters/src/d3-svg-filters.js\n"
          );

          /***/
        },

      /***/ './node_modules/css-loader/dist/cjs.js!./css/SplitStream.css':
        /*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./css/SplitStream.css ***!
  \*******************************************************************/
        /*! no static exports found */
        /***/ function(module, exports, __webpack_require__) {
          eval(
            'exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js")(false);\n// Module\nexports.push([module.i, "", ""]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9jc3MvU3BsaXRTdHJlYW0uY3NzPzUxYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMscUdBQWdEO0FBQ25GO0FBQ0EsY0FBYyxRQUFTIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jc3MvU3BsaXRTdHJlYW0uY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIl0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./css/SplitStream.css\n'
          );

          /***/
        },

      /***/ './node_modules/css-loader/dist/runtime/api.js':
        /*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
        /*! no static exports found */
        /***/ function(module, exports, __webpack_require__) {
          'use strict';
          eval(
            '\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], "{").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxxQkFBcUI7QUFDaEU7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IscUJBQXFCO0FBQ3pDLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDhCQUE4Qjs7QUFFOUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwie1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW19pXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCIoXCIuY29uY2F0KGl0ZW1bMl0sIFwiKSBhbmQgKFwiKS5jb25jYXQobWVkaWFRdWVyeSwgXCIpXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n'
          );

          /***/
        },

      /***/ './node_modules/flatted/esm/index.js':
        /*!*******************************************!*\
  !*** ./node_modules/flatted/esm/index.js ***!
  \*******************************************/
        /*! exports provided: default, parse, stringify */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stringify\", function() { return stringify; });\nvar Flatted = (function (Primitive, primitive) {\n\n  /*!\n   * ISC License\n   *\n   * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n   *\n   * Permission to use, copy, modify, and/or distribute this software for any\n   * purpose with or without fee is hereby granted, provided that the above\n   * copyright notice and this permission notice appear in all copies.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n   * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n   * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n   * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n   * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n   * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n   * PERFORMANCE OF THIS SOFTWARE.\n   */\n\n  var Flatted = {\n\n    parse: function parse(text, reviver) {\n      var input = JSON.parse(text, Primitives).map(primitives);\n      var value = input[0];\n      var $ = reviver || noop;\n      var tmp = typeof value === 'object' && value ?\n                  revive(input, new Set, value, $) :\n                  value;\n      return $.call({'': tmp}, '', tmp);\n    },\n\n    stringify: function stringify(value, replacer, space) {\n      for (var\n        firstRun,\n        known = new Map,\n        input = [],\n        output = [],\n        $ = replacer && typeof replacer === typeof input ?\n              function (k, v) {\n                if (k === '' || -1 < replacer.indexOf(k)) return v;\n              } :\n              (replacer || noop),\n        i = +set(known, input, $.call({'': value}, '', value)),\n        replace = function (key, value) {\n          if (firstRun) {\n            firstRun = !firstRun;\n            return value;\n            // this was invoking twice each root object\n            // return i < 1 ? value : $.call(this, key, value);\n          }\n          var after = $.call(this, key, value);\n          switch (typeof after) {\n            case 'object':\n              if (after === null) return after;\n            case primitive:\n              return known.get(after) || set(known, input, after);\n          }\n          return after;\n        };\n        i < input.length; i++\n      ) {\n        firstRun = true;\n        output[i] = JSON.stringify(input[i], replace, space);\n      }\n      return '[' + output.join(',') + ']';\n    }\n\n  };\n\n  return Flatted;\n\n  function noop(key, value) {\n    return value;\n  }\n\n  function revive(input, parsed, output, $) {\n    return Object.keys(output).reduce(\n      function (output, key) {\n        var value = output[key];\n        if (value instanceof Primitive) {\n          var tmp = input[value];\n          if (typeof tmp === 'object' && !parsed.has(tmp)) {\n            parsed.add(tmp);\n            output[key] = $.call(output, key, revive(input, parsed, tmp, $));\n          } else {\n            output[key] = $.call(output, key, tmp);\n          }\n        } else\n          output[key] = $.call(output, key, value);\n        return output;\n      },\n      output\n    );\n  }\n\n  function set(known, input, value) {\n    var index = Primitive(input.push(value) - 1);\n    known.set(value, index);\n    return index;\n  }\n\n  // the two kinds of primitives\n  //  1. the real one\n  //  2. the wrapped one\n\n  function primitives(value) {\n    return value instanceof Primitive ? Primitive(value) : value;\n  }\n\n  function Primitives(key, value) {\n    return typeof value === primitive ? new Primitive(value) : value;\n  }\n\n}(String, 'string'));\n/* harmony default export */ __webpack_exports__[\"default\"] = (Flatted);\nvar parse = Flatted.parse;\nvar stringify = Flatted.stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmxhdHRlZC9lc20vaW5kZXguanM/NWJjNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0IsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSx1Q0FBdUMsVUFBVTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQztBQUNjLHNFQUFPLEVBQUM7QUFDaEI7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mbGF0dGVkL2VzbS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBGbGF0dGVkID0gKGZ1bmN0aW9uIChQcmltaXRpdmUsIHByaW1pdGl2ZSkge1xuXG4gIC8qIVxuICAgKiBJU0MgTGljZW5zZVxuICAgKlxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTgsIEFuZHJlYSBHaWFtbWFyY2hpLCBAV2ViUmVmbGVjdGlvblxuICAgKlxuICAgKiBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbiAgICogcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZSBhYm92ZVxuICAgKiBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIGFwcGVhciBpbiBhbGwgY29waWVzLlxuICAgKlxuICAgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG4gICAqIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuICAgKiBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG4gICAqIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuICAgKiBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRVxuICAgKiBPUiBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG4gICAqIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4gICAqL1xuXG4gIHZhciBGbGF0dGVkID0ge1xuXG4gICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHRleHQsIHJldml2ZXIpIHtcbiAgICAgIHZhciBpbnB1dCA9IEpTT04ucGFyc2UodGV4dCwgUHJpbWl0aXZlcykubWFwKHByaW1pdGl2ZXMpO1xuICAgICAgdmFyIHZhbHVlID0gaW5wdXRbMF07XG4gICAgICB2YXIgJCA9IHJldml2ZXIgfHwgbm9vcDtcbiAgICAgIHZhciB0bXAgPSB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlID9cbiAgICAgICAgICAgICAgICAgIHJldml2ZShpbnB1dCwgbmV3IFNldCwgdmFsdWUsICQpIDpcbiAgICAgICAgICAgICAgICAgIHZhbHVlO1xuICAgICAgcmV0dXJuICQuY2FsbCh7Jyc6IHRtcH0sICcnLCB0bXApO1xuICAgIH0sXG5cbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICBmb3IgKHZhclxuICAgICAgICBmaXJzdFJ1bixcbiAgICAgICAga25vd24gPSBuZXcgTWFwLFxuICAgICAgICBpbnB1dCA9IFtdLFxuICAgICAgICBvdXRwdXQgPSBbXSxcbiAgICAgICAgJCA9IHJlcGxhY2VyICYmIHR5cGVvZiByZXBsYWNlciA9PT0gdHlwZW9mIGlucHV0ID9cbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoayA9PT0gJycgfHwgLTEgPCByZXBsYWNlci5pbmRleE9mKGspKSByZXR1cm4gdjtcbiAgICAgICAgICAgICAgfSA6XG4gICAgICAgICAgICAgIChyZXBsYWNlciB8fCBub29wKSxcbiAgICAgICAgaSA9ICtzZXQoa25vd24sIGlucHV0LCAkLmNhbGwoeycnOiB2YWx1ZX0sICcnLCB2YWx1ZSkpLFxuICAgICAgICByZXBsYWNlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgICAgICAgIGZpcnN0UnVuID0gIWZpcnN0UnVuO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgLy8gdGhpcyB3YXMgaW52b2tpbmcgdHdpY2UgZWFjaCByb290IG9iamVjdFxuICAgICAgICAgICAgLy8gcmV0dXJuIGkgPCAxID8gdmFsdWUgOiAkLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhZnRlciA9ICQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiBhZnRlcikge1xuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgICAgaWYgKGFmdGVyID09PSBudWxsKSByZXR1cm4gYWZ0ZXI7XG4gICAgICAgICAgICBjYXNlIHByaW1pdGl2ZTpcbiAgICAgICAgICAgICAgcmV0dXJuIGtub3duLmdldChhZnRlcikgfHwgc2V0KGtub3duLCBpbnB1dCwgYWZ0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWZ0ZXI7XG4gICAgICAgIH07XG4gICAgICAgIGkgPCBpbnB1dC5sZW5ndGg7IGkrK1xuICAgICAgKSB7XG4gICAgICAgIGZpcnN0UnVuID0gdHJ1ZTtcbiAgICAgICAgb3V0cHV0W2ldID0gSlNPTi5zdHJpbmdpZnkoaW5wdXRbaV0sIHJlcGxhY2UsIHNwYWNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnWycgKyBvdXRwdXQuam9pbignLCcpICsgJ10nO1xuICAgIH1cblxuICB9O1xuXG4gIHJldHVybiBGbGF0dGVkO1xuXG4gIGZ1bmN0aW9uIG5vb3Aoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJldml2ZShpbnB1dCwgcGFyc2VkLCBvdXRwdXQsICQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob3V0cHV0KS5yZWR1Y2UoXG4gICAgICBmdW5jdGlvbiAob3V0cHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb3V0cHV0W2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByaW1pdGl2ZSkge1xuICAgICAgICAgIHZhciB0bXAgPSBpbnB1dFt2YWx1ZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiB0bXAgPT09ICdvYmplY3QnICYmICFwYXJzZWQuaGFzKHRtcCkpIHtcbiAgICAgICAgICAgIHBhcnNlZC5hZGQodG1wKTtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gJC5jYWxsKG91dHB1dCwga2V5LCByZXZpdmUoaW5wdXQsIHBhcnNlZCwgdG1wLCAkKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dFtrZXldID0gJC5jYWxsKG91dHB1dCwga2V5LCB0bXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgb3V0cHV0W2tleV0gPSAkLmNhbGwob3V0cHV0LCBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgIH0sXG4gICAgICBvdXRwdXRcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0KGtub3duLCBpbnB1dCwgdmFsdWUpIHtcbiAgICB2YXIgaW5kZXggPSBQcmltaXRpdmUoaW5wdXQucHVzaCh2YWx1ZSkgLSAxKTtcbiAgICBrbm93bi5zZXQodmFsdWUsIGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvLyB0aGUgdHdvIGtpbmRzIG9mIHByaW1pdGl2ZXNcbiAgLy8gIDEuIHRoZSByZWFsIG9uZVxuICAvLyAgMi4gdGhlIHdyYXBwZWQgb25lXG5cbiAgZnVuY3Rpb24gcHJpbWl0aXZlcyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByaW1pdGl2ZSA/IFByaW1pdGl2ZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFByaW1pdGl2ZXMoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IHByaW1pdGl2ZSA/IG5ldyBQcmltaXRpdmUodmFsdWUpIDogdmFsdWU7XG4gIH1cblxufShTdHJpbmcsICdzdHJpbmcnKSk7XG5leHBvcnQgZGVmYXVsdCBGbGF0dGVkO1xuZXhwb3J0IHZhciBwYXJzZSA9IEZsYXR0ZWQucGFyc2U7XG5leHBvcnQgdmFyIHN0cmluZ2lmeSA9IEZsYXR0ZWQuc3RyaW5naWZ5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/flatted/esm/index.js\n"
          );

          /***/
        },

      /***/ './node_modules/save-svg-as-png/lib/saveSvgAsPng.js':
        /*!**********************************************************!*\
  !*** ./node_modules/save-svg-as-png/lib/saveSvgAsPng.js ***!
  \**********************************************************/
        /*! no static exports found */
        /***/ function(module, exports, __webpack_require__) {
          'use strict';
          eval(
            "var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function () {\n  var out$ =  true && exports ||  true && {} || this || window;\n  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return out$;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  out$.default = out$;\n\n  var xmlNs = 'http://www.w3.org/2000/xmlns/';\n  var xhtmlNs = 'http://www.w3.org/1999/xhtml';\n  var svgNs = 'http://www.w3.org/2000/svg';\n  var doctype = '<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" [<!ENTITY nbsp \"&#160;\">]>';\n  var urlRegex = /url\\([\"']?(.+?)[\"']?\\)/;\n  var fontFormats = {\n    woff2: 'font/woff2',\n    woff: 'font/woff',\n    otf: 'application/x-font-opentype',\n    ttf: 'application/x-font-ttf',\n    eot: 'application/vnd.ms-fontobject',\n    sfnt: 'application/font-sfnt',\n    svg: 'image/svg+xml'\n  };\n\n  var isElement = function isElement(obj) {\n    return obj instanceof HTMLElement || obj instanceof SVGElement;\n  };\n  var requireDomNode = function requireDomNode(el) {\n    if (!isElement(el)) throw new Error('an HTMLElement or SVGElement is required; got ' + el);\n  };\n  var requireDomNodePromise = function requireDomNodePromise(el) {\n    return new Promise(function (resolve, reject) {\n      if (isElement(el)) resolve(el);else reject(new Error('an HTMLElement or SVGElement is required; got ' + el));\n    });\n  };\n  var isExternal = function isExternal(url) {\n    return url && url.lastIndexOf('http', 0) === 0 && url.lastIndexOf(window.location.host) === -1;\n  };\n\n  var getFontMimeTypeFromUrl = function getFontMimeTypeFromUrl(fontUrl) {\n    var formats = Object.keys(fontFormats).filter(function (extension) {\n      return fontUrl.indexOf('.' + extension) > 0;\n    }).map(function (extension) {\n      return fontFormats[extension];\n    });\n    if (formats) return formats[0];\n    console.error('Unknown font format for ' + fontUrl + '. Fonts may not be working correctly.');\n    return 'application/octet-stream';\n  };\n\n  var arrayBufferToBase64 = function arrayBufferToBase64(buffer) {\n    var binary = '';\n    var bytes = new Uint8Array(buffer);\n    for (var i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }return window.btoa(binary);\n  };\n\n  var getDimension = function getDimension(el, clone, dim) {\n    var v = el.viewBox && el.viewBox.baseVal && el.viewBox.baseVal[dim] || clone.getAttribute(dim) !== null && !clone.getAttribute(dim).match(/%$/) && parseInt(clone.getAttribute(dim)) || el.getBoundingClientRect()[dim] || parseInt(clone.style[dim]) || parseInt(window.getComputedStyle(el).getPropertyValue(dim));\n    return typeof v === 'undefined' || v === null || isNaN(parseFloat(v)) ? 0 : v;\n  };\n\n  var getDimensions = function getDimensions(el, clone, width, height) {\n    if (el.tagName === 'svg') return {\n      width: width || getDimension(el, clone, 'width'),\n      height: height || getDimension(el, clone, 'height')\n    };else if (el.getBBox) {\n      var _el$getBBox = el.getBBox(),\n          x = _el$getBBox.x,\n          y = _el$getBBox.y,\n          _width = _el$getBBox.width,\n          _height = _el$getBBox.height;\n\n      return {\n        width: x + _width,\n        height: y + _height\n      };\n    }\n  };\n\n  var reEncode = function reEncode(data) {\n    return decodeURIComponent(encodeURIComponent(data).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n      var c = String.fromCharCode('0x' + p1);\n      return c === '%' ? '%25' : c;\n    }));\n  };\n\n  var uriToBlob = function uriToBlob(uri) {\n    var byteString = window.atob(uri.split(',')[1]);\n    var mimeString = uri.split(',')[0].split(':')[1].split(';')[0];\n    var buffer = new ArrayBuffer(byteString.length);\n    var intArray = new Uint8Array(buffer);\n    for (var i = 0; i < byteString.length; i++) {\n      intArray[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([buffer], { type: mimeString });\n  };\n\n  var query = function query(el, selector) {\n    if (!selector) return;\n    try {\n      return el.querySelector(selector) || el.parentNode && el.parentNode.querySelector(selector);\n    } catch (err) {\n      console.warn('Invalid CSS selector \"' + selector + '\"', err);\n    }\n  };\n\n  var detectCssFont = function detectCssFont(rule, href) {\n    // Match CSS font-face rules to external links.\n    // @font-face {\n    //   src: local('Abel'), url(https://fonts.gstatic.com/s/abel/v6/UzN-iejR1VoXU2Oc-7LsbvesZW2xOQ-xsNqO47m55DA.woff2);\n    // }\n    var match = rule.cssText.match(urlRegex);\n    var url = match && match[1] || '';\n    if (!url || url.match(/^data:/) || url === 'about:blank') return;\n    var fullUrl = url.startsWith('../') ? href + '/../' + url : url.startsWith('./') ? href + '/.' + url : url;\n    return {\n      text: rule.cssText,\n      format: getFontMimeTypeFromUrl(fullUrl),\n      url: fullUrl\n    };\n  };\n\n  var inlineImages = function inlineImages(el) {\n    return Promise.all(Array.from(el.querySelectorAll('image')).map(function (image) {\n      var href = image.getAttributeNS('http://www.w3.org/1999/xlink', 'href') || image.getAttribute('href');\n      if (!href) return Promise.resolve(null);\n      if (isExternal(href)) {\n        href += (href.indexOf('?') === -1 ? '?' : '&') + 't=' + new Date().valueOf();\n      }\n      return new Promise(function (resolve, reject) {\n        var canvas = document.createElement('canvas');\n        var img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.src = href;\n        img.onerror = function () {\n          return reject(new Error('Could not load ' + href));\n        };\n        img.onload = function () {\n          canvas.width = img.width;\n          canvas.height = img.height;\n          canvas.getContext('2d').drawImage(img, 0, 0);\n          image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', canvas.toDataURL('image/png'));\n          resolve(true);\n        };\n      });\n    }));\n  };\n\n  var cachedFonts = {};\n  var inlineFonts = function inlineFonts(fonts) {\n    return Promise.all(fonts.map(function (font) {\n      return new Promise(function (resolve, reject) {\n        if (cachedFonts[font.url]) return resolve(cachedFonts[font.url]);\n\n        var req = new XMLHttpRequest();\n        req.addEventListener('load', function () {\n          // TODO: it may also be worth it to wait until fonts are fully loaded before\n          // attempting to rasterize them. (e.g. use https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet)\n          var fontInBase64 = arrayBufferToBase64(req.response);\n          var fontUri = font.text.replace(urlRegex, 'url(\"data:' + font.format + ';base64,' + fontInBase64 + '\")') + '\\n';\n          cachedFonts[font.url] = fontUri;\n          resolve(fontUri);\n        });\n        req.addEventListener('error', function (e) {\n          console.warn('Failed to load font from: ' + font.url, e);\n          cachedFonts[font.url] = null;\n          resolve(null);\n        });\n        req.addEventListener('abort', function (e) {\n          console.warn('Aborted loading font from: ' + font.url, e);\n          resolve(null);\n        });\n        req.open('GET', font.url);\n        req.responseType = 'arraybuffer';\n        req.send();\n      });\n    })).then(function (fontCss) {\n      return fontCss.filter(function (x) {\n        return x;\n      }).join('');\n    });\n  };\n\n  var cachedRules = null;\n  var styleSheetRules = function styleSheetRules() {\n    if (cachedRules) return cachedRules;\n    return cachedRules = Array.from(document.styleSheets).map(function (sheet) {\n      try {\n        return { rules: sheet.cssRules, href: sheet.href };\n      } catch (e) {\n        console.warn('Stylesheet could not be loaded: ' + sheet.href, e);\n        return {};\n      }\n    });\n  };\n\n  var inlineCss = function inlineCss(el, options) {\n    var _ref = options || {},\n        selectorRemap = _ref.selectorRemap,\n        modifyStyle = _ref.modifyStyle,\n        modifyCss = _ref.modifyCss,\n        fonts = _ref.fonts;\n\n    var generateCss = modifyCss || function (selector, properties) {\n      var sel = selectorRemap ? selectorRemap(selector) : selector;\n      var props = modifyStyle ? modifyStyle(properties) : properties;\n      return sel + '{' + props + '}\\n';\n    };\n    var css = [];\n    var detectFonts = typeof fonts === 'undefined';\n    var fontList = fonts || [];\n    styleSheetRules().forEach(function (_ref2) {\n      var rules = _ref2.rules,\n          href = _ref2.href;\n\n      if (!rules) return;\n      Array.from(rules).forEach(function (rule) {\n        if (typeof rule.style != 'undefined') {\n          if (query(el, rule.selectorText)) css.push(generateCss(rule.selectorText, rule.style.cssText));else if (detectFonts && rule.cssText.match(/^@font-face/)) {\n            var font = detectCssFont(rule, href);\n            if (font) fontList.push(font);\n          } else css.push(rule.cssText);\n        }\n      });\n    });\n\n    return inlineFonts(fontList).then(function (fontCss) {\n      return css.join('\\n') + fontCss;\n    });\n  };\n\n  var downloadOptions = function downloadOptions() {\n    if (!navigator.msSaveOrOpenBlob && !('download' in document.createElement('a'))) {\n      return { popup: window.open() };\n    }\n  };\n\n  out$.prepareSvg = function (el, options, done) {\n    requireDomNode(el);\n\n    var _ref3 = options || {},\n        _ref3$left = _ref3.left,\n        left = _ref3$left === undefined ? 0 : _ref3$left,\n        _ref3$top = _ref3.top,\n        top = _ref3$top === undefined ? 0 : _ref3$top,\n        w = _ref3.width,\n        h = _ref3.height,\n        _ref3$scale = _ref3.scale,\n        scale = _ref3$scale === undefined ? 1 : _ref3$scale,\n        _ref3$responsive = _ref3.responsive,\n        responsive = _ref3$responsive === undefined ? false : _ref3$responsive;\n\n    return inlineImages(el).then(function () {\n      var clone = el.cloneNode(true);\n      clone.style.backgroundColor = (options || {}).backgroundColor || el.style.backgroundColor;\n\n      var _getDimensions = getDimensions(el, clone, w, h),\n          width = _getDimensions.width,\n          height = _getDimensions.height;\n\n      if (el.tagName !== 'svg') {\n        if (el.getBBox) {\n          if (clone.getAttribute('transform') != null) {\n            clone.setAttribute('transform', clone.getAttribute('transform').replace(/translate\\(.*?\\)/, ''));\n          }\n          var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n          svg.appendChild(clone);\n          clone = svg;\n        } else {\n          console.error('Attempted to render non-SVG element', el);\n          return;\n        }\n      }\n\n      clone.setAttribute('version', '1.1');\n      clone.setAttribute('viewBox', [left, top, width, height].join(' '));\n      if (!clone.getAttribute('xmlns')) clone.setAttributeNS(xmlNs, 'xmlns', svgNs);\n      if (!clone.getAttribute('xmlns:xlink')) clone.setAttributeNS(xmlNs, 'xmlns:xlink', 'http://www.w3.org/1999/xlink');\n\n      if (responsive) {\n        clone.removeAttribute('width');\n        clone.removeAttribute('height');\n        clone.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n      } else {\n        clone.setAttribute('width', width * scale);\n        clone.setAttribute('height', height * scale);\n      }\n\n      Array.from(clone.querySelectorAll('foreignObject > *')).forEach(function (foreignObject) {\n        foreignObject.setAttributeNS(xmlNs, 'xmlns', foreignObject.tagName === 'svg' ? svgNs : xhtmlNs);\n      });\n\n      return inlineCss(el, options).then(function (css) {\n        var style = document.createElement('style');\n        style.setAttribute('type', 'text/css');\n        style.innerHTML = '<![CDATA[\\n' + css + '\\n]]>';\n\n        var defs = document.createElement('defs');\n        defs.appendChild(style);\n        clone.insertBefore(defs, clone.firstChild);\n\n        var outer = document.createElement('div');\n        outer.appendChild(clone);\n        var src = outer.innerHTML.replace(/NS\\d+:href/gi, 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href');\n\n        if (typeof done === 'function') done(src, width, height);else return { src: src, width: width, height: height };\n      });\n    });\n  };\n\n  out$.svgAsDataUri = function (el, options, done) {\n    requireDomNode(el);\n    return out$.prepareSvg(el, options).then(function (_ref4) {\n      var src = _ref4.src,\n          width = _ref4.width,\n          height = _ref4.height;\n\n      var svgXml = 'data:image/svg+xml;base64,' + window.btoa(reEncode(doctype + src));\n      if (typeof done === 'function') {\n        done(svgXml, width, height);\n      }\n      return svgXml;\n    });\n  };\n\n  out$.svgAsPngUri = function (el, options, done) {\n    requireDomNode(el);\n\n    var _ref5 = options || {},\n        _ref5$encoderType = _ref5.encoderType,\n        encoderType = _ref5$encoderType === undefined ? 'image/png' : _ref5$encoderType,\n        _ref5$encoderOptions = _ref5.encoderOptions,\n        encoderOptions = _ref5$encoderOptions === undefined ? 0.8 : _ref5$encoderOptions,\n        canvg = _ref5.canvg;\n\n    var convertToPng = function convertToPng(_ref6) {\n      var src = _ref6.src,\n          width = _ref6.width,\n          height = _ref6.height;\n\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      var pixelRatio = window.devicePixelRatio || 1;\n\n      canvas.width = width * pixelRatio;\n      canvas.height = height * pixelRatio;\n      canvas.style.width = canvas.width + 'px';\n      canvas.style.height = canvas.height + 'px';\n      context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n      if (canvg) canvg(canvas, src);else context.drawImage(src, 0, 0);\n\n      var png = void 0;\n      try {\n        png = canvas.toDataURL(encoderType, encoderOptions);\n      } catch (e) {\n        if (typeof SecurityError !== 'undefined' && e instanceof SecurityError || e.name === 'SecurityError') {\n          console.error('Rendered SVG images cannot be downloaded in this browser.');\n          return;\n        } else throw e;\n      }\n      if (typeof done === 'function') done(png, canvas.width, canvas.height);\n      return Promise.resolve(png);\n    };\n\n    if (canvg) return out$.prepareSvg(el, options).then(convertToPng);else return out$.svgAsDataUri(el, options).then(function (uri) {\n      return new Promise(function (resolve, reject) {\n        var image = new Image();\n        image.onload = function () {\n          return resolve(convertToPng({\n            src: image,\n            width: image.width,\n            height: image.height\n          }));\n        };\n        image.onerror = function () {\n          reject('There was an error loading the data URI as an image on the following SVG\\n' + window.atob(uri.slice(26)) + 'Open the following link to see browser\\'s diagnosis\\n' + uri);\n        };\n        image.src = uri;\n      });\n    });\n  };\n\n  out$.download = function (name, uri, options) {\n    if (navigator.msSaveOrOpenBlob) navigator.msSaveOrOpenBlob(uriToBlob(uri), name);else {\n      var saveLink = document.createElement('a');\n      if ('download' in saveLink) {\n        saveLink.download = name;\n        saveLink.style.display = 'none';\n        document.body.appendChild(saveLink);\n        try {\n          var blob = uriToBlob(uri);\n          var url = URL.createObjectURL(blob);\n          saveLink.href = url;\n          saveLink.onclick = function () {\n            return requestAnimationFrame(function () {\n              return URL.revokeObjectURL(url);\n            });\n          };\n        } catch (e) {\n          console.error(e);\n          console.warn('Error while getting object URL. Falling back to string URL.');\n          saveLink.href = uri;\n        }\n        saveLink.click();\n        document.body.removeChild(saveLink);\n      } else if (options && options.popup) {\n        options.popup.document.title = name;\n        options.popup.location.replace(uri);\n      }\n    }\n  };\n\n  out$.saveSvg = function (el, name, options) {\n    var downloadOpts = downloadOptions(); // don't inline, can't be async\n    return requireDomNodePromise(el).then(function (el) {\n      return out$.svgAsDataUri(el, options || {});\n    }).then(function (uri) {\n      return out$.download(name, uri, downloadOpts);\n    });\n  };\n\n  out$.saveSvgAsPng = function (el, name, options) {\n    var downloadOpts = downloadOptions(); // don't inline, can't be async\n    return requireDomNodePromise(el).then(function (el) {\n      return out$.svgAsPngUri(el, options || {});\n    }).then(function (uri) {\n      return out$.download(name, uri, downloadOpts);\n    });\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/save-svg-as-png/lib/saveSvgAsPng.js\n"
          );

          /***/
        },

      /***/ './node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js':
        /*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
        /*! no static exports found */
        /***/ function(module, exports, __webpack_require__) {
          'use strict';
          eval(
            "\n\nvar stylesInDom = {};\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nfunction listToStyles(list, options) {\n  var styles = [];\n  var newStyles = {};\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n\n  return styles;\n}\n\nfunction addStylesToDom(styles, options) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i];\n    var domStyle = stylesInDom[item.id];\n    var j = 0;\n\n    if (domStyle) {\n      domStyle.refs++;\n\n      for (; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j]);\n      }\n\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j], options));\n      }\n    } else {\n      var parts = [];\n\n      for (; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j], options));\n      }\n\n      stylesInDom[item.id] = {\n        id: item.id,\n        refs: 1,\n        parts: parts\n      };\n    }\n  }\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(options.attributes).forEach(function (key) {\n    style.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  var styles = listToStyles(list, options);\n  addStylesToDom(styles, options);\n  return function update(newList) {\n    var mayRemove = [];\n\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i];\n      var domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs--;\n        mayRemove.push(domStyle);\n      }\n    }\n\n    if (newList) {\n      var newStyles = listToStyles(newList, options);\n      addStylesToDom(newStyles, options);\n    }\n\n    for (var _i = 0; _i < mayRemove.length; _i++) {\n      var _domStyle = mayRemove[_i];\n\n      if (_domStyle.refs === 0) {\n        for (var j = 0; j < _domStyle.parts.length; j++) {\n          _domStyle.parts[j]();\n        }\n\n        delete stylesInDom[_domStyle.id];\n      }\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n"
          );

          /***/
        },

      /***/ './src/SplitStream.js':
        /*!****************************!*\
  !*** ./src/SplitStream.js ***!
  \****************************/
        /*! exports provided: default */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SplitStream; });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "d3");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(d3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _libs_d3svgfilters_src_d3_svg_filters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../libs/d3svgfilters/src/d3-svg-filters.js */ "./libs/d3svgfilters/src/d3-svg-filters.js");\n/* harmony import */ var _libs_d3svgfilters_src_d3_svg_filters_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_libs_d3svgfilters_src_d3_svg_filters_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SplitStreamInputData.js */ "./src/SplitStreamInputData.js");\n/* harmony import */ var _SplitStreamFilter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SplitStreamFilter.js */ "./src/SplitStreamFilter.js");\n/* harmony import */ var _SplitStreamData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SplitStreamData.js */ "./src/SplitStreamData.js");\n/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functions.js */ "./src/functions.js");\n/* harmony import */ var _css_SplitStream_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../css/SplitStream.css */ "./css/SplitStream.css");\n/* harmony import */ var _css_SplitStream_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_css_SplitStream_css__WEBPACK_IMPORTED_MODULE_6__);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SplitStream {\r\n  constructor(container, opts = {}) {\r\n    this._opts = {\r\n      animDuration: 1000,\r\n      margin: { top: 20, right: 20, bottom: 20, left: 20 },\r\n      height: container.clientHeight,\r\n      width: container.clientWidth,\r\n      automaticUpdate: true,\r\n      minSizeThreshold: 0,\r\n      //separationXMethod: "",\r\n      xMargin: 0,\r\n      //separationYMethod: "",\r\n      yMargin: 0,\r\n      yPadding: 0,\r\n      zoomTimeFactor: 1,\r\n      unifySize: false,\r\n      unifyPosition: false,\r\n      drawStroke: false,\r\n      showLabels: false,\r\n      mirror: false,\r\n      splitRoot: false,\r\n      shapeRendering: "geometricPrecision",\r\n      offset: "silhouette", // zero, expand, silhouette,\r\n      filterMode: "fast",\r\n\r\n      ...opts // overwrite default settings with user settings\r\n    };\r\n\r\n    this._name = container.id;\r\n    this._container = container;\r\n    this._data;\r\n    this._pathContainer;\r\n    this._textContainer;\r\n    this._svg;\r\n    this._svgFilters;\r\n    this._filters;\r\n    this._datasetsLoaded = 0;\r\n\r\n    this._streamData = new _SplitStreamData_js__WEBPACK_IMPORTED_MODULE_4__["default"]();\r\n    this._minTime;\r\n    this._maxTime;\r\n    this._maxValue;\r\n    this._maxDepth;\r\n    this._indices = {};\r\n\r\n    this._xSpacing = this.xSpacingFixed;\r\n    this._ySpacing = this.ySpacingFixed;\r\n\r\n    this._onMouseOver;\r\n    this._onMouseOut;\r\n\r\n    this._color = d3__WEBPACK_IMPORTED_MODULE_0__["scaleSequential"](d3__WEBPACK_IMPORTED_MODULE_0__["interpolateBlues"]);\r\n    this._colorRandom = false;\r\n\r\n    this._init();\r\n  }\r\n\r\n  static get a() {}\r\n\r\n  data(d) {\r\n    return d == null ? this._data : (this._setData(d), this);\r\n  }\r\n\r\n  filters(d) {\r\n    return d == null ? this._filters : (this._setFilters(d), this);\r\n  }\r\n\r\n  options(opts) {\r\n    Object.assign(this._opts, opts);\r\n  }\r\n\r\n  set automaticUpdate(auto) {\r\n    this._opts.automaticUpdate = auto;\r\n  }\r\n  set unifySize(unify) {\r\n    this._opts.unifySize = unify;\r\n    this._update();\r\n  }\r\n  set yPadding(value) {\r\n    this._opts.yPadding = +value;\r\n    this._update();\r\n  }\r\n  set unifyPosition(unify) {\r\n    this._opts.unifyPosition = unify;\r\n    this._update();\r\n  }\r\n  set mirror(mirror) {\r\n    this._opts.mirror = mirror;\r\n    this._update();\r\n  }\r\n  set splitRoot(splitRoot) {\r\n    this._opts.splitRoot = splitRoot;\r\n    this._update();\r\n  }\r\n  set minSizeThreshold(threshold) {\r\n    this._opts.minSizeThreshold = +threshold / 100;\r\n    this._update();\r\n  }\r\n  set zoomTime(factor) {\r\n    this._opts.zoomTimeFactor = +factor;\r\n    this._update();\r\n  }\r\n  set offset(offset) {\r\n    this._opts.offset = offset;\r\n    this._update();\r\n  }\r\n  set xMargin(value) {\r\n    this._opts.xMargin = +value;\r\n    this._update();\r\n  }\r\n  set yMargin(value) {\r\n    this._opts.yMargin = +value;\r\n    this._update();\r\n  }\r\n  set shapeRendering(rendering) {\r\n    this._opts.shapeRendering = rendering;\r\n    this.render();\r\n  }\r\n  set filterMode(mode) {\r\n    if (mode != this._opts.filterMode) {\r\n      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"](".depthLayer").clearFilter();\r\n      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("path.stream").clearFilter();\r\n    }\r\n    this._opts.filterMode = mode;\r\n    this._applyFilters();\r\n  }\r\n\r\n  set color(colorFunction) {\r\n    this._color = colorFunction;\r\n    this.render();\r\n  }\r\n  set colorRandom(random) {\r\n    this._colorRandom = random;\r\n    this.render();\r\n  }\r\n  set proportion(value) {\r\n    this._streamData.proportion = this._opts.proportion = +value;\r\n    this._update();\r\n  }\r\n  set startEndEncoding(encoding) {\r\n    this._streamData.startEndEncoding = encoding;\r\n    this._update();\r\n  }\r\n  set startEndEncodingX(x) {\r\n    this._streamData.startEndEncodingX = x;\r\n    this._update();\r\n  }\r\n  set startEndEncodingY(y) {\r\n    this._streamData.startEndEncodingY = y;\r\n    this._update();\r\n  }\r\n  set xSpacing(callback) {\r\n    this._xSpacing = callback;\r\n    this._update();\r\n  }\r\n  set ySpacing(callback) {\r\n    this._ySpacing = callback;\r\n    this._update();\r\n  }\r\n\r\n  set onMouseOver(callback) {\r\n    this._onMouseOver = callback;\r\n    this.render();\r\n  }\r\n\r\n  set onMouseOut(callback) {\r\n    this._onMouseOut = callback;\r\n    this.render();\r\n  }\r\n\r\n  get splits() {\r\n    this._streamData.splits;\r\n  }\r\n\r\n  // expects SplitStreamInputData as input\r\n  _setData(d) {\r\n    if (!(d instanceof _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_2__["default"] || d instanceof _SplitStreamFilter_js__WEBPACK_IMPORTED_MODULE_3__["default"]))\r\n      console.error(\r\n        "Added data is not an instance of SplitStreamData or SplitStreamFilter"\r\n      );\r\n\r\n    this._datasetsLoaded++;\r\n    this._data = d.data;\r\n    this._normalizeData();\r\n    this._update();\r\n  }\r\n\r\n  _setFilters(d) {\r\n    if (!d || typeof d !== "object")\r\n      return console.log(`ERROR: Added data "${d}" is not an object.`);\r\n    this._filters = d;\r\n    this._applyFilters();\r\n  }\r\n\r\n  _init() {\r\n    const { margin } = this._opts;\r\n    this._svg = d3__WEBPACK_IMPORTED_MODULE_0__["select"](this._container)\r\n      .append("svg")\r\n      .classed("secstream", "true")\r\n      .attr("height", this._container.clientHeight)\r\n      .attr("width", this._container.clientWidth)\r\n      .call(\r\n        d3__WEBPACK_IMPORTED_MODULE_0__["zoom"]().on("zoom", () => {\r\n          this._pathContainer.attr("transform", d3__WEBPACK_IMPORTED_MODULE_0__["event"].transform);\r\n          this._textContainer.attr("transform", d3__WEBPACK_IMPORTED_MODULE_0__["event"].transform);\r\n        })\r\n      );\r\n    //.on("contextmenu", () => d3.event.preventDefault());\r\n    //.append(\'g\')\r\n    //\t.attr(\'id\', \'svg-drawn\')\r\n    //.attr(\'transform\', "translate(" + margin.left + "," + margin.top + ")");\r\n\r\n    this._svgFilters = this._svg.append("defs");\r\n    this._pathContainer = this._svg.append("g").classed("pathContainer", true);\r\n    this._textContainer = this._svg.append("g").classed("textContainer", true);\r\n  }\r\n\r\n  _applyOrdering() {\r\n    // change the order of siblings in the data for less edge crossings\r\n    // TEST: RANDOM ORDER OF LEAF NODES\r\n  }\r\n\r\n  // returns true if node id did not exist before\r\n  _findStreamId(node) {\r\n    if (!!node.prev) {\r\n      // use id of prev node\r\n      node.streamId = node.prev[0].streamId;\r\n      return false;\r\n    } else {\r\n      // new node\r\n      // check if id is already in use\r\n      if (!this._indices[node.id]) {\r\n        // if not, use this id for the stream\r\n        this._indices[node.id] = true;\r\n        node.streamId = node.id;\r\n      } else {\r\n        // find a new ID\r\n        let count = 0;\r\n        let id;\r\n        do {\r\n          count++;\r\n          id = node.id + "_" + count;\r\n        } while (!!this._indices[id]);\r\n        // console.log(`ID \'${node.id}\' is already in use. Use \'${id}\' instead.`);\r\n        // ID is now in use\r\n        this._indices[id] = true;\r\n        node.streamId = id;\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n\r\n  _clearStreamIds() {\r\n    this._streamData.clear();\r\n    this._indices = {};\r\n  }\r\n\r\n  _normalizeData() {\r\n    // if node does not have a size, set it\'s size to the sum of the sizes of its children\r\n    // if a node does not have a size and does not have children, give it size 1\r\n\r\n    // TODO: this padding interferes with positions\r\n    let checkSizes = node => {\r\n      if (!!node.children) {\r\n        let aggregate = 0;\r\n        for (let child of node.children) {\r\n          checkSizes(child);\r\n          aggregate += child.size;\r\n        }\r\n        if (aggregate > node.dataSize || this._opts.unifySize)\r\n          node.size = aggregate;\r\n        else node.size = node.dataSize;\r\n\r\n        let padding = (node.children.length + 1) * this._opts.yPadding; // * (1 / (node.depth + 1));\r\n        node.size += padding;\r\n      } else\r\n        node.size = this._opts.unifySize\r\n          ? 1\r\n          : node.dataSize + this._opts.yPadding;\r\n    };\r\n\r\n    // TODO: This version is better with positions but doesn\'t work properly in general\r\n    // let checkSizes = node => {\r\n    //   if (!!node.children) {\r\n    //     let aggregate = 0;\r\n    //     for (let child of node.children) {\r\n    //       checkSizes(child);\r\n    //       aggregate += child.size;\r\n    //     }\r\n    //     let dataSize = node.dataSize + this._opts.yPadding;\r\n    //     if (aggregate > dataSize || this._opts.unifySize)\r\n    //       node.size = aggregate + this._opts.yPadding;\r\n    //     else node.size = dataSize;\r\n    //   } else node.size = this._opts.unifySize ? 1 : node.dataSize;\r\n    // };\r\n\r\n    // positions must be unified, if sizes are unified\r\n    let checkPositions = (node, pos = 0) => {\r\n      if (\r\n        this._opts.unifySize ||\r\n        this._opts.unifyPosition ||\r\n        !node.dataPos ||\r\n        (!!node.parent && node.parent.id == "fakeRoot")\r\n      )\r\n        node.pos = pos;\r\n      else node.pos = node.dataPos;\r\n\r\n      if (!!node.children && node.children.length > 0) {\r\n        let aggregate = 0;\r\n        for (let child of node.children) {\r\n          aggregate += child.size;\r\n        }\r\n        let spacing = (node.size - aggregate) / (node.children.length + 1);\r\n\r\n        for (let [i, child] of node.children.entries()) {\r\n          pos += spacing;\r\n          checkPositions(child, pos);\r\n          pos += child.size;\r\n        }\r\n      }\r\n    };\r\n\r\n    this._clearStreamIds();\r\n    let time = this._data.timesteps;\r\n    this._maxValue = 0;\r\n    this._maxTime = 0;\r\n    this._minTime = Infinity;\r\n    for (let t in time) {\r\n      checkSizes(time[t].tree);\r\n      checkPositions(time[t].tree);\r\n      this._maxValue = Math.max(this._maxValue, time[t].tree.size);\r\n      this._minTime = Math.min(this._minTime, +t);\r\n      this._maxTime = Math.max(this._maxTime, +t);\r\n    }\r\n\r\n    this._maxDepth = 0;\r\n    let traverse = (node, depth) => {\r\n      this._maxDepth = Math.max(this._maxDepth, depth);\r\n      node.depth = depth++;\r\n      let isNew = this._findStreamId(node);\r\n      if (isNew) this._streamData.add(node);\r\n\r\n      if (!!node.children)\r\n        node.children.forEach(child => traverse(child, depth));\r\n    };\r\n\r\n    for (let i in time) traverse(time[i].tree, 0);\r\n  }\r\n\r\n  _calculatePositions() {\r\n    let { height, width, margin, minSizeThreshold, offset } = this._opts;\r\n\r\n    let setOffset = root => {\r\n      if (offset == "zero") {\r\n        root.y0 = 0;\r\n        root.y1 = root.size / this._maxValue;\r\n      } else if (offset == "expand") {\r\n        root.y0 = 0;\r\n        root.y1 = 1;\r\n      } else if (offset == "silhouette") {\r\n        root.y0 = 0.5 - (0.5 * root.size) / this._maxValue;\r\n        root.y1 = 0.5 + (0.5 * root.size) / this._maxValue;\r\n      }\r\n    };\r\n\r\n    let traverse = (node, childX = 0) => {\r\n      let p = node.parent;\r\n      if (!p) {\r\n        node.marginX = this._opts.splitRoot ? this._xSpacing(node) : 0;\r\n      } else {\r\n        node.x = p.x;\r\n        let numMargins = p.children.length + 1;\r\n        let space = p.y1 - p.y0 - numMargins * p.marginY;\r\n        if (space <= 0) {\r\n          node.y0 = 0.5 * (p.y0 + p.y1);\r\n          node.y1 = 0.5 * (p.y0 + p.y1);\r\n        } else {\r\n          // normalize\r\n          node.rpos = (node.pos - p.pos) / p.size;\r\n          node.rsize = node.size / p.size;\r\n          node.y0 = p.y0 + (childX + 1) * p.marginY + space * node.rpos;\r\n          node.y1 = node.y0 + space * node.rsize;\r\n\r\n          let size = node.y1 - node.y0;\r\n          if (size <= minSizeThreshold) {\r\n            node.y0 = 0.5 * (node.y0 + node.y1);\r\n            node.y1 = 0.5 * (node.y0 + node.y1);\r\n          }\r\n        }\r\n\r\n        node.marginX = p.marginX + this._xSpacing(node);\r\n      }\r\n\r\n      node.marginY = this._ySpacing(node);\r\n\r\n      if (!!node.children)\r\n        node.children.forEach((child, i) => traverse(child, i));\r\n    };\r\n\r\n    let time = this._data.timesteps;\r\n    for (let i in time) {\r\n      time[i].tree.x = +i;\r\n      setOffset(time[i].tree);\r\n      traverse(time[i].tree);\r\n    }\r\n\r\n    // treemaps require 0.5 time space to the left and right of the timestep\r\n    this._streamData.xScale = d3__WEBPACK_IMPORTED_MODULE_0__["scaleLinear"]()\r\n      .domain([this._minTime - 0.5, this._maxTime + 0.5])\r\n      // .domain([\r\n      //   this._minTime - 0.5 * (1 - this._opts.proportion),\r\n      //   this._maxTime + 0.5 * (1 - this._opts.proportion)\r\n      // ])\r\n      .range([margin.left, width * this._opts.zoomTimeFactor - margin.right]);\r\n\r\n    let domain = this._opts.mirror ? [1, 0] : [0, 1];\r\n    this._streamData.yScale = d3__WEBPACK_IMPORTED_MODULE_0__["scaleLinear"]()\r\n      .domain(domain)\r\n      .nice()\r\n      .range([height - margin.bottom, margin.top]);\r\n    //.range(margin.top, height - margin.bottom);\r\n  }\r\n\r\n  setRootNodeById(Id) {\r\n    let root = this._streamData.streams.find(d => d.id == id);\r\n  }\r\n\r\n  render() {\r\n    let color = this._colorRandom\r\n      ? _functions_js__WEBPACK_IMPORTED_MODULE_5__["getRandomColor"]\r\n      : this._color.domain([this._maxDepth, 0]);\r\n\r\n    let streamsByDepth = d3__WEBPACK_IMPORTED_MODULE_0__["nest"]()\r\n      .key(d => d.deepestDepth)\r\n      .entries(this._streamData.streams);\r\n\r\n    let depthLayers = this._pathContainer\r\n      .selectAll("g.depthLayer > g.clipLayer")\r\n      .data(streamsByDepth, d => this._name + this._datasetsLoaded + d.key)\r\n      .join(enter =>\r\n        enter\r\n          .append("g")\r\n          .classed("depthLayer", true)\r\n          .each(function(d) {\r\n            this.classList.add("depth-" + d.key);\r\n          })\r\n          .append("g")\r\n          .classed("clipLayer", true)\r\n      );\r\n\r\n    // .attr(\'clip-path\', d => \'url(#clip\' + d.key + \'wrapper)\');\r\n\r\n    depthLayers\r\n      .selectAll("path.stream")\r\n      .data(d => d.values, d => this._name + this._datasetsLoaded + d.id)\r\n      .join(enter =>\r\n        enter\r\n          .append("path")\r\n          .classed("stream", true)\r\n          .on("mouseover", this._onMouseOver)\r\n          .on("mouseout", this._onMouseOut)\r\n          .attr("clip-path", d => "url(#clip" + d.id + this._name + ")")\r\n          .attr("id", d => "stream" + d.id + this._name)\r\n          //.attr(\'stroke-width\', 3)\r\n          .attr("paint-order", "stroke")\r\n      )\r\n      .attr("d", d => d.path)\r\n      .attr("shape-rendering", this._opts.shapeRendering)\r\n      .attr(\r\n        "fill",\r\n        d => (!!d.data ? d.data.color : null) || color(d.deepestDepth)\r\n        // \'white\'\r\n      )\r\n      // remove empty streams (they do not include a single bezier curve)\r\n      .filter(d => d.path.indexOf("C") == -1)\r\n      .remove();\r\n\r\n    this.showLabels(this._opts.showLabels);\r\n    this.drawStroke(this._opts.drawStroke);\r\n\r\n    let splitData = this._svgFilters\r\n      .selectAll("clipPath")\r\n      .data(\r\n        this._streamData.clipPaths,\r\n        d => this._name + this._datasetsLoaded + d.id\r\n      );\r\n\r\n    splitData\r\n      .enter()\r\n      .append("clipPath")\r\n      .attr("id", d => "clip" + d.id + this._name)\r\n      .merge(splitData)\r\n      .html(d => \'<path d="\' + d.path + \'">\');\r\n\r\n    splitData.exit().remove();\r\n\r\n    this._applyFilters();\r\n  }\r\n\r\n  showLabels(show = true) {\r\n    this._opts.showLabels = show;\r\n    let labelData = this._opts.showLabels ? this._streamData.streams : [];\r\n\r\n    let labels = this._textContainer\r\n      .selectAll("text")\r\n      .data(labelData, d => d.id);\r\n\r\n    labels\r\n      .enter()\r\n      .append("text")\r\n      .text(d => (!!d.data ? d.data.typeLabel : d.id))\r\n      .merge(labels)\r\n      .attr("x", d => d.textPos.x)\r\n      .attr("y", d => d.textPos.y);\r\n\r\n    labels.exit().remove();\r\n  }\r\n\r\n  drawStroke(draw = true) {\r\n    this._opts.drawStroke = draw;\r\n    let color = this._opts.drawStroke ? "black" : null;\r\n    this._pathContainer.attr("stroke", color);\r\n    this._pathContainer.attr("stroke-width", 3);\r\n    // d3.selectAll(\'path\').attr(\'stroke-width\', 0.001)\r\n  }\r\n\r\n  _applyFilters() {\r\n    if (!this._filters) return;\r\n\r\n    let filters = [];\r\n    for (let filter of this._filters)\r\n      filters.push(filter.type, {\r\n        color: "black",\r\n        dx: filter.dx,\r\n        dy: filter.dy,\r\n        blur: filter.stdDeviation\r\n      });\r\n\r\n    if (this._opts.filterMode == "fast")\r\n      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"](".depthLayer").svgFilter(...filters);\r\n    else if (this._opts.filterMode == "accurate")\r\n      d3__WEBPACK_IMPORTED_MODULE_0__["selectAll"]("path.stream").svgFilter(...filters);\r\n  }\r\n\r\n  update() {\r\n    this._update(true);\r\n  }\r\n  _update(manuallyTriggered = false) {\r\n    if (!this._data) return;\r\n\r\n    if (!this._opts.automaticUpdate) if (!manuallyTriggered) return;\r\n\r\n    console.log("update");\r\n    let startTime = Date.now();\r\n\r\n    this._normalizeData();\r\n    this._applyOrdering();\r\n    this._calculatePositions();\r\n\r\n    // this._streamData.preprocess();\r\n    this._streamData.calculatePaths();\r\n    this.render();\r\n\r\n    console.log(\r\n      "TIMING: " + this._data.numNodes + "," + (Date.now() - startTime)\r\n    );\r\n  }\r\n\r\n  resize(\r\n    width = this._container.clientWidth,\r\n    height = this._container.clientHeight\r\n  ) {\r\n    this._opts.width = width;\r\n    this._opts.height = height;\r\n    this._svg.attr("width", width).attr("height", height);\r\n\r\n    this._update();\r\n  }\r\n\r\n  ySpacingFixed(node) {\r\n    return this._opts.yMargin / 4;\r\n  }\r\n\r\n  ySpacingPercentage(node) {\r\n    return ((node.y1 - node.y0) * this._opts.yMargin) / 2;\r\n  }\r\n\r\n  ySpacingHierarchical(node) {\r\n    return ((node.depth + 1) * this._opts.yMargin) / 4;\r\n  }\r\n\r\n  ySpacingHierarchicalReverse(node) {\r\n    return ((1 / (node.depth + 1)) * this._opts.yMargin) / 4;\r\n  }\r\n\r\n  xSpacingFixed(node) {\r\n    return this._opts.xMargin / 10;\r\n  }\r\n\r\n  // TODO: use the max depth at that timepoint instead\r\n  xSpacingHierarchical(node) {\r\n    return ((node.depth + 1) / this._maxDepth) * this._opts.xMargin;\r\n  }\r\n\r\n  xSpacingHierarchicalReverse(node) {\r\n    return (1 / (node.depth + 1)) * this._opts.xMargin;\r\n  }\r\n\r\n  addSplits(splits) {\r\n    this._streamData.addSplits(splits);\r\n    this._update();\r\n  }\r\n\r\n  addSplitsAtTimepoints() {\r\n    let splits = [];\r\n    for (let i = this._minTime; i <= this._maxTime; i++) splits.push(i);\r\n    this.addSplits(splits);\r\n  }\r\n\r\n  addSplitsBetweenTimepoints() {\r\n    let splits = [];\r\n    for (let i = this._minTime - 1; i <= this._maxTime; i++)\r\n      splits.push(i + 0.5);\r\n    this.addSplits(splits);\r\n  }\r\n\r\n  addSplitsRandomly(num = 1) {\r\n    let t0 = this._minTime - 1;\r\n    let t1 = this._maxTime + 1;\r\n    let splits = [];\r\n    for (let i = 0; i < num; i++) {\r\n      let r = t0 + Math.random() * (t1 - t0);\r\n      splits.push(r.toString());\r\n      splits.sort();\r\n    }\r\n    this.addSplits(splits);\r\n  }\r\n\r\n  removeSplits(splits) {\r\n    this._streamData.removeSplits(splits);\r\n    this._update();\r\n  }\r\n\r\n  // static extend(...args) {\r\n  //     this.myNewFunction\r\n  // }\r\n  // extend(...args) {\r\n  //     return SplitStream.extend(...args);\r\n  // }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/SplitStream.js\n'
          );

          /***/
        },

      /***/ './src/SplitStreamData.js':
        /*!********************************!*\
  !*** ./src/SplitStreamData.js ***!
  \********************************/
        /*! exports provided: default */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SplitStreamData; });\n/* harmony import */ var _SvgPath_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SvgPath.js */ \"./src/SvgPath.js\");\n\r\n\r\nclass SplitStreamData {\r\n  // array of streams\r\n  // every stream has a unique ID\r\n  // every stream contains references to all nodes which belong to that stream\r\n\r\n  // if parent never changes, draw stream after parent\r\n  // if parent changes, draw after both parents.\r\n  // if special case, split path in 2 and draw before and after\r\n  constructor() {\r\n    this._streamNodes = [];\r\n    this._streams = [];\r\n    this._splits = {};\r\n    this._xScale = d => d;\r\n    this._yScale = d => d;\r\n    this._proportion = 1;\r\n\r\n    this._xCurve = 'bezier'; // linear, bezier\r\n    this._startEnd = {\r\n      encoding: 'plug', // circle, plug, default\r\n      x: 0.85,\r\n      y: 0\r\n    };\r\n  }\r\n\r\n  get streams() {\r\n    return this._streams;\r\n  }\r\n  get clipPaths() {\r\n    return this._clipPaths;\r\n  }\r\n  get splits() {\r\n    return Object.keys(this._splits);\r\n  }\r\n\r\n  set xScale(callback) {\r\n    this._xScale = callback;\r\n  }\r\n  set yScale(callback) {\r\n    this._yScale = callback;\r\n  }\r\n  set startEndEncoding(encoding) {\r\n    this._startEnd.encoding = encoding;\r\n  }\r\n  set startEndEncodingX(x) {\r\n    this._startEnd.x = x;\r\n  }\r\n  set startEndEncodingY(y) {\r\n    this._startEnd.y = y;\r\n  }\r\n  set proportion(p) {\r\n    this._proportion = p;\r\n  }\r\n\r\n  add(node) {\r\n    this._streamNodes.push(node);\r\n  }\r\n\r\n  // extract special operations (splits, merges, parentSwap) from the data and treat it extra\r\n  preprocess() {\r\n    let mergeNodes = [];\r\n    let splitNodes = [];\r\n    let parentSwaps = [];\r\n    let newStreams = [];\r\n\r\n    // cut connection between node and previous nodes\r\n    let cutPrevious = node => {\r\n      if (!!node.prev) {\r\n        for (let prev of node.prev) {\r\n          if (prev.next.length == 1) prev.next = undefined;\r\n          else prev.next.splice(prev.next.indexOf(node), 1);\r\n        }\r\n      }\r\n    };\r\n\r\n    // cut connection between node and next nodes\r\n    let cutNext = node => {\r\n      if (!!node.next) {\r\n        for (let next of node.next) {\r\n          if (next.prev.length == 1) next.prev = undefined;\r\n          else next.prev.splice(next.prev.indexOf(node), 1);\r\n        }\r\n      }\r\n    };\r\n\r\n    let traverse = node => {\r\n      if (!!node.next) for (let next of node.next) traverse(next);\r\n\r\n      // split nodes\r\n      if (!!node.next && node.next.length > 1) {\r\n        splitNodes.push(node);\r\n        cutNext(node);\r\n        // create new streams from here\r\n        newStreams.push({ ...node.next });\r\n\r\n        // end stream here\r\n        node.next = undefined;\r\n      }\r\n\r\n      // merge nodes\r\n      if (!!node.prev && node.prev.length > 1) {\r\n        mergeNodes.push(node);\r\n        endPrevious(node);\r\n\r\n        node.prev = undefined;\r\n        this.newStreams.push(node);\r\n      }\r\n\r\n      // parent swap\r\n      if (!!node.next) {\r\n        for (let next of node.next) {\r\n          // only consider nodes whos parents change\r\n          // 1. node becomes root node (parent changes from defined to undefined)\r\n          // 2. parent id changes (TODO: make sure that this case is not handled twice, because both node's parents change)\r\n          if (\r\n            (!node.parent && !!next.parent) ||\r\n            (!!node.parent && !!next.parent && node.parent.id != next.parent.id)\r\n          ) {\r\n            // check if next.parent had node as an ancestor in the previous step\r\n\r\n            if (!!next.parent.prev) {\r\n              for (let prev of next.parent.prev) {\r\n                let isAncestor = false;\r\n                let p = prev;\r\n                while (p && !isAncestor) {\r\n                  if (p.id == node.id) isAncestor = true;\r\n                  else p = p.parent;\r\n                }\r\n                if (isAncestor) {\r\n                  endPrevious(prev);\r\n                  if (!!prev.next) addFollowing(prev.next);\r\n                  parentSwaps.push({\r\n                    node: { ...prev },\r\n                    next: { ...next.parent }\r\n                  });\r\n                  prev.next = undefined;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    // draw special case for node \"p\" and all its children, as well as node\r\n\r\n    // loop in reverse, because elements are added and deleted\r\n    for (let i = this._streamNodes.length - 1; i >= 0; i--) {\r\n      traverse(this._streamNodes[i]);\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this._streamNodes = [];\r\n    this._streams = [];\r\n    this._clipPaths = [];\r\n  }\r\n\r\n  addSplits(splits) {\r\n    if (Array.isArray(splits))\r\n      splits.forEach(d => {\r\n        this._splits[d] = true;\r\n      });\r\n    else this._splits[d] = true;\r\n  }\r\n\r\n  removeSplits(splits) {\r\n    if (!splits) this._splits = {};\r\n    else\r\n      splits.forEach(d => {\r\n        this._splits[d].remove();\r\n      });\r\n  }\r\n\r\n  //TODO: find more elaborate solution\r\n  _findSplits(t0, t1) {\r\n    let splits = [];\r\n    for (let split in this._splits) {\r\n      if (split >= t0 && split <= t1) splits.push(+split);\r\n    }\r\n    return splits;\r\n  }\r\n\r\n  _findClosestNode(stream, x) {\r\n    let traverseTime = function(node) {\r\n      let distance = Math.abs(node.x - x);\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closestNode = node;\r\n        // if distance is greater than minDistance, it will only increase with following nodes\r\n        if (!!node.next) {\r\n          node.next.forEach(traverseTime);\r\n        }\r\n      }\r\n    };\r\n    let minDistance = Infinity;\r\n    let closestNode;\r\n    traverseTime(stream);\r\n    return closestNode;\r\n  }\r\n\r\n  // WARNING: work in process\r\n  _checkForNullStreams() {\r\n    for (let i = 0; i < this._streamNodes.length; i++) {\r\n      let isNull = true;\r\n\r\n      let traverse = node => {\r\n        if (node.y1 - node.y0 > 0) {\r\n          isNull = false;\r\n          return;\r\n        }\r\n\r\n        if (!!node.next) node.next.forEach(traverse);\r\n      };\r\n\r\n      traverse(this._streamNodes[i]);\r\n\r\n      if (isNull) {\r\n        delete this._streamNodes[i]; //delete stream;\r\n        i--;\r\n      }\r\n    }\r\n  }\r\n\r\n  _drawStart(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    // extend to left\r\n    d.move(x(node.x), y(node.y1));\r\n\r\n    // don't draw start for zero values\r\n    if (node.y1 - node.y0 <= 0) return;\r\n\r\n    let t = node.x - 0.5 * (1 - prop);\r\n    d.horizontal(x(t));\r\n\r\n    // connect top and bottom\r\n    let root = node;\r\n    while (!!root.parent) root = root.parent;\r\n\r\n    if (!root.prev) {\r\n      // make first timestep flat\r\n      d.vertical(y(node.y0));\r\n    } else {\r\n      if (this._startEnd.encoding == 'circle') this._drawStartCircle(d, node);\r\n      else if (this._startEnd.encoding == 'plug') this._drawStartPlug(d, node);\r\n      else this._drawStartDefault(d, node);\r\n    }\r\n\r\n    // connect back\r\n    d.horizontal(x(node.x));\r\n  }\r\n\r\n  _drawEnd(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    if (node.y1 - node.y0 <= 0) return;\r\n\r\n    // extend to right\r\n    let t = node.x + 0.5 * (1 - prop);\r\n    d.horizontal(x(t));\r\n\r\n    // connect bottom and top\r\n    let root = node;\r\n    while (!!root.parent) root = root.parent;\r\n    if (!root.next) {\r\n      // make last timestep flat\r\n      d.vertical(y(node.y1));\r\n    } else {\r\n      if (this._startEnd.encoding == 'circle') this._drawEndCircle(d, node);\r\n      else if (this._startEnd.encoding == 'plug') this._drawEndPlug(d, node);\r\n      else this._drawEndDefault(d, node);\r\n    }\r\n\r\n    // connect back\r\n    d.horizontal(x(node.x));\r\n  }\r\n\r\n  _drawStartDefault(path, node) {\r\n    // insert node\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    // find position to insert node\r\n    let pos;\r\n    // find the oldest parent of node, which does not exist in the previous step\r\n    let parentNoPrev = node;\r\n    while (!!parentNoPrev.parent && !parentNoPrev.parent.prev)\r\n      parentNoPrev = parentNoPrev.parent;\r\n\r\n    // p is an ancestor who existed in the previous timestep\r\n    let p = parentNoPrev.parent;\r\n    if (!p) {\r\n      d.vertical(y(node.y0));\r\n    } else {\r\n      // use the center of the stream as reference point\r\n      let mid = 0.5 * (parentNoPrev.y0 + parentNoPrev.y1);\r\n\r\n      // if the nodes parent has multiple previous nodes, find the one closest to mid\r\n      let refPrevId = -1;\r\n      for (let n = 0; n < p.prev.length && refPrevId == -1; n++) {\r\n        let prev = p.prev[n];\r\n        // if mid lies within a prev node\r\n        if (prev.y0 <= mid && prev.y1 >= mid) {\r\n          // if node has children\r\n          if (!!prev.children && prev.children.length > 0) {\r\n            let refChildId = -1; // find two children to put the mid in between\r\n            for (let i = 0; i < prev.children.length && refChildId == -1; i++) {\r\n              let child = prev.children[i];\r\n              if (mid <= 0.5 * (child.y0 + child.y1)) refChildId = i; // setting ID breaks the loop\r\n            }\r\n            if (refChildId == 0)\r\n              // before first child\r\n              pos = 0.5 * (prev.y0 + prev.children[0].y0);\r\n            else if (refChildId == -1)\r\n              // after last child\r\n              pos =\r\n                0.5 * (prev.y1 + prev.children[prev.children.length - 1].y1);\r\n            else\r\n              pos =\r\n                0.5 *\r\n                (prev.children[refChildId - 1].y1 +\r\n                  prev.children[refChildId].y0);\r\n          } // node has no children\r\n          else pos = 0.5 * (prev.y0 + prev.y1);\r\n          refPrevId = -2; // setting ID breaks the loop\r\n        }\r\n        // if it lies outside, find two nodes to put it inbetween\r\n        else {\r\n          if (mid <= 0.5 * (prev.y0 + prev.y1)) refPrevId = n; // setting ID breaks the loop\r\n        }\r\n      }\r\n\r\n      if (refPrevId != -2) {\r\n        // if -2, then pos was already set\r\n        let node; // define the node to draw inside\r\n        let first; // boolean to define if it should be drawn before the first or after the last child\r\n        if (refPrevId == 0) {\r\n          // before first child\r\n          node = p.prev[0];\r\n          first = true;\r\n        } else if (refPrevId == -1) {\r\n          // after last child\r\n          node = p.prev[p.prev.length - 1];\r\n          first = false;\r\n        } else {\r\n          // find which node is closer\r\n          if (\r\n            Math.abs(p.prev[refPrevId].y0 - mid) <\r\n            Math.abs(p.prev[refPrevId - 1].y1)\r\n          ) {\r\n            node = p.prev[refPrevId];\r\n            first = true;\r\n          } else {\r\n            node = p.prev[refPrevId - 1];\r\n            first = false;\r\n          }\r\n        }\r\n\r\n        if (!!node.children && node.children.length > 0) {\r\n          if (first) pos = 0.5 * (node.y0 + node.children[0].y0);\r\n          else\r\n            pos = 0.5 * (node.y1 + node.children[node.children.length - 1].y1);\r\n        } else pos = 0.5 * (node.y0 + node.y1);\r\n      }\r\n\r\n      let tdiff = node.x - p.prev[0].x;\r\n      let t0 = node.x - 0.5 * (1 - prop) * tdiff;\r\n      let t1 = t0 - 0.5 * prop * tdiff;\r\n\r\n      if (this._xCurve == 'linear') {\r\n        d.line(x(p.prev[0].x), y(pos));\r\n        d.line(x(t0), y(node.y0));\r\n      } else if (this._xCurve == 'bezier') {\r\n        d.bezier(x(t1), y(node.y1), x(t1), y(pos), x(p.prev[0].x), y(pos));\r\n        d.bezier(x(t1), y(pos), x(t1), y(node.y0), x(t0), y(node.y0));\r\n      }\r\n    }\r\n  }\r\n\r\n  _drawEndDefault(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    // find position to delete node to\r\n    let pos;\r\n    // find the oldest parent of node, which does not exist in the next step\r\n    let parentNoNext = node;\r\n    while (!!parentNoNext.parent && !parentNoNext.parent.next)\r\n      parentNoNext = parentNoNext.parent; // p is the oldest parent of node, which does not exist in the next step\r\n\r\n    // p is an ancestor who exists in the next timestep\r\n    let p = parentNoNext.parent;\r\n    if (!p) {\r\n      d.vertical(y(node.y1));\r\n    } else {\r\n      // use the center of the stream as reference point\r\n      let mid = 0.5 * (parentNoNext.y0 + parentNoNext.y1);\r\n      // if the nodes parent has multiple next nodes, find the one closest to mid\r\n      let refNextId = -1;\r\n      for (let n = 0; n < p.next.length && refNextId == -1; n++) {\r\n        let next = p.next[n];\r\n        // if mid lies within a next node\r\n        if (next.y0 <= mid && next.y1 >= mid) {\r\n          // if node has children\r\n          if (!!next.children && next.children.length > 0) {\r\n            let refChildId = -1; // find two children to put the mid in between\r\n            for (let i = 0; i < next.children.length && refChildId == -1; i++) {\r\n              let child = next.children[i];\r\n              if (mid <= 0.5 * (child.y0 + child.y1)) refChildId = i; // setting ID breaks the loop\r\n            }\r\n            if (refChildId == 0)\r\n              // before first child\r\n              pos = 0.5 * (next.y0 + next.children[0].y0);\r\n            else if (refChildId == -1)\r\n              // after last child\r\n              pos =\r\n                0.5 * (next.y1 + next.children[next.children.length - 1].y1);\r\n            else\r\n              pos =\r\n                0.5 *\r\n                (next.children[refChildId - 1].y1 +\r\n                  next.children[refChildId].y0);\r\n          } // node has no children\r\n          else pos = 0.5 * (next.y0 + next.y1);\r\n          refNextId = -2; // setting ID breaks the loop\r\n        }\r\n        // if it lies outside, find two nodes to put it inbetween\r\n        else {\r\n          if (mid <= 0.5 * (next.y0 + next.y1)) refNextId = n; // setting ID breaks the loop\r\n        }\r\n      }\r\n\r\n      if (refNextId != -2) {\r\n        // if -2, then pos was already set\r\n        let node; // define the node to draw inside\r\n        let first; // boolean to define if it should be drawn before the first or after the last child\r\n        if (refNextId == 0) {\r\n          // before first child\r\n          node = p.next[0];\r\n          first = true;\r\n        } else if (refNextId == -1) {\r\n          // after last child\r\n          node = p.next[p.next.length - 1];\r\n          first = false;\r\n        } else {\r\n          // find which node is closer\r\n          if (\r\n            Math.abs(p.next[refNextId].y0 - mid) <\r\n            Math.abs(p.next[refNextId - 1].y1)\r\n          ) {\r\n            node = p.next[refNextId];\r\n            first = true;\r\n          } else {\r\n            node = p.next[refNextId - 1];\r\n            first = false;\r\n          }\r\n        }\r\n\r\n        if (!!node.children && node.children.length > 0) {\r\n          if (first) pos = 0.5 * (node.y0 + node.children[0].y0);\r\n          else\r\n            pos = 0.5 * (node.y1 + node.children[node.children.length - 1].y1);\r\n        } else pos = 0.5 * (node.y0 + node.y1);\r\n      }\r\n\r\n      let tdiff = p.next[0].x - node.x;\r\n      let t0 = node.x + 0.5 * (1 - prop) * tdiff;\r\n      let t1 = t0 + 0.5 * prop * tdiff;\r\n\r\n      if (this._xCurve == 'linear') {\r\n        d.line(x(p.next[0].x), y(pos));\r\n        d.line(x(t0), y(node.y1));\r\n      } else if (this._xCurve == 'bezier') {\r\n        d.bezier(x(t1), y(node.y0), x(t1), y(pos), x(p.next[0].x), y(pos));\r\n        d.bezier(x(t1), y(pos), x(t1), y(node.y1), x(t0), y(node.y1));\r\n      }\r\n    }\r\n  }\r\n\r\n  _drawStartCircle(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    let height = node.y1 - node.y0;\r\n    let t = node.x - 0.5 * (1 - prop);\r\n    d.move(x(t), y(node.y1));\r\n    //d.arc(Math.log(height), 1, 0, 0, 0, x(node.x), y(node.y0));\r\n    d.arc(prop, 1, 0, 0, 0, x(t), y(node.y0));\r\n  }\r\n\r\n  _drawEndCircle(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    let height = node.y1 - node.y0;\r\n    let t = node.x + 0.5 * (1 - prop);\r\n    //d.arc(Math.log(height), 1, 0, 0, 0, x(node.x), y(node.y1));\r\n    d.arc(prop, 1, 0, 0, 0, x(t), y(node.y1));\r\n  }\r\n\r\n  _drawStartPlug(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    let t = node.x - 0.5 * (1 - prop);\r\n    let height = node.y1 - node.y0;\r\n    d.bezier(\r\n      x(t - prop * this._startEnd.x * Math.sqrt(height)),\r\n      y(node.y1 + this._startEnd.y * height),\r\n      x(t - prop * this._startEnd.x * Math.sqrt(height)),\r\n      y(node.y0 - this._startEnd.y * height),\r\n      x(t),\r\n      y(node.y0)\r\n    );\r\n  }\r\n\r\n  _drawEndPlug(path, node) {\r\n    const d = path,\r\n      prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n\r\n    let t = node.x + 0.5 * (1 - prop);\r\n    let height = node.y1 - node.y0;\r\n    d.bezier(\r\n      x(t + prop * this._startEnd.x * Math.sqrt(height)),\r\n      y(node.y0 - this._startEnd.y * height),\r\n      x(t + prop * this._startEnd.x * Math.sqrt(height)),\r\n      y(node.y1 + this._startEnd.y * height),\r\n      x(t),\r\n      y(node.y1)\r\n    );\r\n  }\r\n\r\n  calculatePaths() {\r\n    //this._checkForNullStreams();\r\n\r\n    const prop = this._proportion,\r\n      x = this._xScale,\r\n      y = this._yScale;\r\n    let d, lastTimepoint, deepestDepth, largestSize; // find the deepest depth each stream has over the whole timeseries\r\n\r\n    let drawLine = (t1, t2, t3, ySource, yDest) => {\r\n      let t12 = 0.5 * (t1 + t2); // mid between t1 and t2\r\n      d.horizontal(t1);\r\n      if (this._xCurve == 'linear') {\r\n        d.line(t2, y(yDest));\r\n      } else if (this._xCurve == 'bezier') {\r\n        d.bezier(t12, y(ySource), t12, y(yDest), t2, y(yDest));\r\n      }\r\n      d.horizontal(t3);\r\n    };\r\n\r\n    let traverse = node => {\r\n      if (node.x > lastTimepoint) lastTimepoint = node.x;\r\n\r\n      if (node.depth > deepestDepth) deepestDepth = node.depth;\r\n      if (node.size > largestSize) largestSize = node.size;\r\n\r\n      if (!!node.next) {\r\n        let dt = node.next[0].x - node.x;\r\n        let t0 = x(node.x);\r\n        let t1 = x(node.x + 0.5 * (1 - prop) * dt);\r\n        let t2 = x(node.next[0].x - 0.5 * (1 - prop) * dt);\r\n        let t3 = x(node.next[0].x);\r\n\r\n        for (let i = 0; i < node.next.length; i++) {\r\n          let y0 = node.y0;\r\n          let y1 = node.y1;\r\n          let dest = node.next[i];\r\n\r\n          // don't draw anything for streams with zero height\r\n          if (y1 - y0 <= 0 && dest.y1 - dest.y0 <= 0) {\r\n            d.move(t3, y(dest.y0));\r\n            traverse(dest);\r\n            d.move(t0, y(y0));\r\n          } else {\r\n            drawLine(t1, t2, t3, y0, dest.y0); // bottom line (forwards)\r\n            traverse(dest);\r\n            drawLine(t2, t1, t0, dest.y1, y1); // top line (backwards)\r\n          }\r\n        }\r\n      } else this._drawEnd(d, node);\r\n    };\r\n\r\n    for (let stream of this._streamNodes) {\r\n      d = new _SvgPath_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n      // reset before new values are found by traverse\r\n      lastTimepoint = 0;\r\n      deepestDepth = 0;\r\n      largestSize = 0;\r\n\r\n      this._drawStart(d, stream);\r\n      traverse(stream);\r\n      //d.close();\r\n\r\n      // add splits\r\n\r\n      let clipPath = new _SvgPath_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n      let splits = this._findSplits(stream.x - 0.5, lastTimepoint + 0.5);\r\n\r\n      let clipStart = x(-1);\r\n      let y0 = y(0);\r\n      let y1 = y(1);\r\n      for (let split of splits) {\r\n        // we move by 0.0001 to avoid cases in which the split is in the middle of 2 nodes\r\n        let clipEnd = x(\r\n          split - 0.5 * this._findClosestNode(stream, split - 0.0001).marginX\r\n        );\r\n\r\n        if (clipEnd - clipStart > 0) {\r\n          clipPath.move(clipStart, y0);\r\n          clipPath.horizontal(clipEnd);\r\n          clipPath.vertical(y1);\r\n          /*let dist = y1-y0;\r\n          let zigzags = 300;\r\n          let zigzagWidth = 5;\r\n          for (let z = 0; z < zigzags; z++) {\r\n              let dir = (z % 2 * 2 - 1);\r\n              clipPath.lineD(dir * zigzagWidth, dist/zigzags)\r\n          }*/\r\n\r\n          clipPath.horizontal(clipStart);\r\n          clipPath.vertical(y0);\r\n          /*for (let z = 0; z < zigzags; z++) {\r\n              let dir = (z % 2 * 2 - 1);\r\n              clipPath.lineD(dir * zigzagWidth, -dist/zigzags)\r\n          }*/\r\n        }\r\n        clipStart = x(\r\n          split + 0.5 * this._findClosestNode(stream, split + 0.0001).marginX\r\n        );\r\n      }\r\n      clipPath.move(clipStart, y0);\r\n      clipPath.horizontal(x(lastTimepoint + 1));\r\n      clipPath.vertical(y1);\r\n      clipPath.horizontal(clipStart);\r\n      clipPath.vertical(y0);\r\n\r\n      this._clipPaths.push({\r\n        id: stream.streamId,\r\n        path: clipPath.get()\r\n      });\r\n\r\n      // find position to put a text label\r\n      let textPos;\r\n      if (Math.abs(y(stream.y1) - y(stream.y0)) < 25) textPos = -1;\r\n      else {\r\n        if (y(stream.y1) > y(stream.y0)) textPos = y(stream.y0) + 15;\r\n        else textPos = y(stream.y1) + 15;\r\n      }\r\n\r\n      let streamObj = {\r\n        path: d.get(),\r\n        depth: stream.depth,\r\n        deepestDepth: deepestDepth,\r\n        largestSize: largestSize,\r\n        id: stream.streamId,\r\n        data: stream.data,\r\n        textPos: {\r\n          x: x(stream.x - 0.5 * (1 - this._proportion) + 0.5 * stream.marginX),\r\n          y: textPos\r\n        }\r\n      };\r\n\r\n      this._streams.push(streamObj);\r\n      // if (!this._streams[stream.depth])\r\n      //     this._streams[stream.depth] = [];\r\n      // this._streams[stream.depth].push(streamObj);\r\n    }\r\n\r\n    // WARNING: This was a fix for: \"if stream IDs are strings, the clipPath array has an empty value in the beginning --> remove\"\r\n    // But instead it just removes all clipPaths which have string as an ID\r\n    //this._clipPaths = this._clipPaths.filter(d => d);\r\n\r\n    // TODO: apply an order in which children are drawn correctly\r\n    // this._streams.sort((a,b) => (a.depth < b.depth) ? -1 : 1)\r\n    this._streams.sort((a, b) => (a.deepestDepth < b.deepestDepth ? -1 : 1));\r\n    //this._streams.sort((a,b) => a.id < b.id ? -1: 1)\r\n    //this._streams.reverse();\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/SplitStreamData.js\n"
          );

          /***/
        },

      /***/ './src/SplitStreamFilter.js':
        /*!**********************************!*\
  !*** ./src/SplitStreamFilter.js ***!
  \**********************************/
        /*! exports provided: default */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SplitStreamFilter; });\n/* harmony import */ var flatted_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! flatted/esm */ "./node_modules/flatted/esm/index.js");\n/* harmony import */ var _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SplitStreamInputData.js */ "./src/SplitStreamInputData.js");\n\r\n\r\n\r\nclass SplitStreamFilter {\r\n  // expects SplitStreamInputData.data as input\r\n  constructor(inputData, options = {}) {\r\n    this._opts = {\r\n      ...options // overwrite default settings with user settings\r\n    };\r\n    if (!inputData instanceof _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_1__["default"])\r\n      throw Exeption(\'Added data is not an instance of SplitStreamData\');\r\n    this.__inputData = inputData;\r\n    this._filteredData;\r\n    this._lastMaxDepth = 0;\r\n    this._reset();\r\n  }\r\n\r\n  get data() {\r\n    return this._filteredData;\r\n  }\r\n\r\n  _reset() {\r\n    let json = Object(flatted_esm__WEBPACK_IMPORTED_MODULE_0__["stringify"])(this.__inputData.data);\r\n    this._filteredData = Object(flatted_esm__WEBPACK_IMPORTED_MODULE_0__["parse"])(json);\r\n    this._filteredData.timesteps = this._filteredData.timesteps.filter(d => d);\r\n    return this;\r\n  }\r\n\r\n  maxDepth(maxDepth) {\r\n    // if (maxDepth > this._lastMaxDepth) this._reset();\r\n\r\n    let traverse = node => {\r\n      if (node.depth >= maxDepth) {\r\n        node.children = [];\r\n      } else {\r\n        if (!!node.children) for (let child of node.children) traverse(child);\r\n      }\r\n    };\r\n\r\n    for (let time of this._filteredData.timesteps) {\r\n      if (!!time)\r\n        // TODO: Check why some entries are empty\r\n        traverse(time.tree);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  branch(branchNr) {\r\n    branchNr = +branchNr;\r\n    // this._reset();\r\n    for (let time of this._filteredData.timesteps) {\r\n      if (!!time) {\r\n        // TODO: Check why some entries are empty\r\n        let branches = time.tree.children;\r\n        // remove branches after branchNr\r\n        if (branchNr < branches.length - 1) branches.splice(branchNr + 1);\r\n        // remove branches before branchNr\r\n        if (branchNr > 0) branches.splice(0, branchNr);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  select(nodeId) {}\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9zcmMvU3BsaXRTdHJlYW1GaWx0ZXIuanM/ZTJkNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUErQztBQUNjOztBQUU5QztBQUNmO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnRUFBb0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsNkRBQVM7QUFDeEIseUJBQXlCLHlEQUFLO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvU3BsaXRTdHJlYW1GaWx0ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSwgc3RyaW5naWZ5IH0gZnJvbSAnZmxhdHRlZC9lc20nO1xyXG5pbXBvcnQgU3BsaXRTdHJlYW1JbnB1dERhdGEgZnJvbSAnLi9TcGxpdFN0cmVhbUlucHV0RGF0YS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGxpdFN0cmVhbUZpbHRlciB7XHJcbiAgLy8gZXhwZWN0cyBTcGxpdFN0cmVhbUlucHV0RGF0YS5kYXRhIGFzIGlucHV0XHJcbiAgY29uc3RydWN0b3IoaW5wdXREYXRhLCBvcHRpb25zID0ge30pIHtcclxuICAgIHRoaXMuX29wdHMgPSB7XHJcbiAgICAgIC4uLm9wdGlvbnMgLy8gb3ZlcndyaXRlIGRlZmF1bHQgc2V0dGluZ3Mgd2l0aCB1c2VyIHNldHRpbmdzXHJcbiAgICB9O1xyXG4gICAgaWYgKCFpbnB1dERhdGEgaW5zdGFuY2VvZiBTcGxpdFN0cmVhbUlucHV0RGF0YSlcclxuICAgICAgdGhyb3cgRXhlcHRpb24oJ0FkZGVkIGRhdGEgaXMgbm90IGFuIGluc3RhbmNlIG9mIFNwbGl0U3RyZWFtRGF0YScpO1xyXG4gICAgdGhpcy5fX2lucHV0RGF0YSA9IGlucHV0RGF0YTtcclxuICAgIHRoaXMuX2ZpbHRlcmVkRGF0YTtcclxuICAgIHRoaXMuX2xhc3RNYXhEZXB0aCA9IDA7XHJcbiAgICB0aGlzLl9yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRhdGEoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyZWREYXRhO1xyXG4gIH1cclxuXHJcbiAgX3Jlc2V0KCkge1xyXG4gICAgbGV0IGpzb24gPSBzdHJpbmdpZnkodGhpcy5fX2lucHV0RGF0YS5kYXRhKTtcclxuICAgIHRoaXMuX2ZpbHRlcmVkRGF0YSA9IHBhcnNlKGpzb24pO1xyXG4gICAgdGhpcy5fZmlsdGVyZWREYXRhLnRpbWVzdGVwcyA9IHRoaXMuX2ZpbHRlcmVkRGF0YS50aW1lc3RlcHMuZmlsdGVyKGQgPT4gZCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIG1heERlcHRoKG1heERlcHRoKSB7XHJcbiAgICAvLyBpZiAobWF4RGVwdGggPiB0aGlzLl9sYXN0TWF4RGVwdGgpIHRoaXMuX3Jlc2V0KCk7XHJcblxyXG4gICAgbGV0IHRyYXZlcnNlID0gbm9kZSA9PiB7XHJcbiAgICAgIGlmIChub2RlLmRlcHRoID49IG1heERlcHRoKSB7XHJcbiAgICAgICAgbm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICghIW5vZGUuY2hpbGRyZW4pIGZvciAobGV0IGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pIHRyYXZlcnNlKGNoaWxkKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKGxldCB0aW1lIG9mIHRoaXMuX2ZpbHRlcmVkRGF0YS50aW1lc3RlcHMpIHtcclxuICAgICAgaWYgKCEhdGltZSlcclxuICAgICAgICAvLyBUT0RPOiBDaGVjayB3aHkgc29tZSBlbnRyaWVzIGFyZSBlbXB0eVxyXG4gICAgICAgIHRyYXZlcnNlKHRpbWUudHJlZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGJyYW5jaChicmFuY2hOcikge1xyXG4gICAgYnJhbmNoTnIgPSArYnJhbmNoTnI7XHJcbiAgICAvLyB0aGlzLl9yZXNldCgpO1xyXG4gICAgZm9yIChsZXQgdGltZSBvZiB0aGlzLl9maWx0ZXJlZERhdGEudGltZXN0ZXBzKSB7XHJcbiAgICAgIGlmICghIXRpbWUpIHtcclxuICAgICAgICAvLyBUT0RPOiBDaGVjayB3aHkgc29tZSBlbnRyaWVzIGFyZSBlbXB0eVxyXG4gICAgICAgIGxldCBicmFuY2hlcyA9IHRpbWUudHJlZS5jaGlsZHJlbjtcclxuICAgICAgICAvLyByZW1vdmUgYnJhbmNoZXMgYWZ0ZXIgYnJhbmNoTnJcclxuICAgICAgICBpZiAoYnJhbmNoTnIgPCBicmFuY2hlcy5sZW5ndGggLSAxKSBicmFuY2hlcy5zcGxpY2UoYnJhbmNoTnIgKyAxKTtcclxuICAgICAgICAvLyByZW1vdmUgYnJhbmNoZXMgYmVmb3JlIGJyYW5jaE5yXHJcbiAgICAgICAgaWYgKGJyYW5jaE5yID4gMCkgYnJhbmNoZXMuc3BsaWNlKDAsIGJyYW5jaE5yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzZWxlY3Qobm9kZUlkKSB7fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/SplitStreamFilter.js\n'
          );

          /***/
        },

      /***/ './src/SplitStreamInputData.js':
        /*!*************************************!*\
  !*** ./src/SplitStreamInputData.js ***!
  \*************************************/
        /*! exports provided: default */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SplitStreamInputData; });\nclass SplitStreamInputData {\r\n  constructor(options = {}) {\r\n    this._opts = {\r\n      forceFakeRoot: false,\r\n      ...options // overwrite default settings with user settings\r\n    };\r\n    // hold a tree (root node) for each timestep\r\n    // hold a reference array which includes all nodes present in a single timestep\r\n    this._timesteps = [];\r\n    this._numNodes = 0;\r\n  }\r\n\r\n  get data() {\r\n    return { timesteps: this._timesteps, numNodes: this._numNodes };\r\n  }\r\n\r\n  addNode(t, id, size = undefined, pos = undefined, data = undefined) {\r\n    if (!this._timesteps[t]) this._createTimestep(t);\r\n\r\n    if (!this._timesteps[t].references[id]) {\r\n      let dataSize = +size;\r\n      let dataPos = +pos;\r\n      id = String(id);\r\n      // size = +size;\r\n      // pos = +pos;\r\n      this._timesteps[t].references[id] = {\r\n        id,\r\n        dataSize,\r\n        dataPos,\r\n        size,\r\n        pos,\r\n        data\r\n      };\r\n      this._numNodes++;\r\n    } else; // console.log(`Warning AddNode: Node ${id} at timestep ${t} exists already.`);\r\n  }\r\n\r\n  addParent(t, id, pId) {\r\n    if (!pId) return;\r\n    let nodes = this._timesteps[t].references;\r\n    let node = nodes[id];\r\n    let parent = nodes[pId];\r\n    if (!node) {\r\n      // console.log(`Error 'addParent': Node '${id}' does not exist.`);\r\n      return;\r\n    }\r\n    if (!parent) {\r\n      // console.log(`Error 'addParent': Parent node '${pId}' does not exist.`);\r\n      return;\r\n    }\r\n    node.parent = parent;\r\n    if (!parent.children) parent.children = [];\r\n    parent.children.push(node);\r\n  }\r\n\r\n  addNext(t, id, nextId) {\r\n    let time1 = this._timesteps[t];\r\n    let time2 = this._timesteps[+t + 1];\r\n    if (!time1 || !time2) {\r\n      // console.log(`Error 'addNext': Timestep '${+t + 1}' does not exist.`);\r\n      return false;\r\n    }\r\n\r\n    let node = time1.references[id];\r\n    let nextNode = time2.references[nextId];\r\n    if (!node || !nextNode) {\r\n      // console.log(`Error 'addNext': Node '${id}' does not exist.`);\r\n      return false;\r\n    }\r\n\r\n    // console.log(`Change timestep ${t}: ${id} to ${nextId}`);\r\n    if (!node.next) node.next = [];\r\n    node.next.push(nextNode);\r\n    if (!nextNode.prev) nextNode.prev = [];\r\n    nextNode.prev.push(node);\r\n    return true;\r\n  }\r\n\r\n  finalize() {\r\n    this._checkParents();\r\n\r\n    this.__forEachNodeDepthFirst((node, depth) => {\r\n      this._setSizeAndAggregate(node);\r\n      node.depth = depth;\r\n      this._checkSize(node);\r\n      this._checkPositions(node);\r\n    });\r\n  }\r\n\r\n  // check if all nodes except the root have a parent\r\n  // if multiple roots exist, create a fake root\r\n  _checkParents() {\r\n    let nodesWithoutParents = {};\r\n    for (let t in this._timesteps) {\r\n      let nodes = this._timesteps[t].references;\r\n      for (let id in nodes) {\r\n        let node = nodes[id];\r\n        if (!node.parent) {\r\n          if (!nodesWithoutParents[t]) nodesWithoutParents[t] = [];\r\n          nodesWithoutParents[t].push(node);\r\n        }\r\n      }\r\n    }\r\n\r\n    let fakeRootNeeded = false;\r\n    for (let t in nodesWithoutParents) {\r\n      if (nodesWithoutParents[t].length > 1) {\r\n        fakeRootNeeded = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (fakeRootNeeded || this._opts.forceFakeRoot) {\r\n      let prevT;\r\n      for (let t in nodesWithoutParents) {\r\n        this.addNode(t, 'fakeRoot');\r\n        nodesWithoutParents[t].forEach(node => {\r\n          this.addParent(t, node.id, 'fakeRoot');\r\n          this._timesteps[t].tree = this._timesteps[t].references['fakeRoot'];\r\n        });\r\n        // connect fake roots\r\n        if (!!prevT) {\r\n          this.addNext(prevT, 'fakeRoot', 'fakeRoot');\r\n        }\r\n        prevT = t;\r\n      }\r\n    } else {\r\n      // every timepoint has a single root node\r\n      for (let t in nodesWithoutParents) {\r\n        this._timesteps[t].tree = nodesWithoutParents[t][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  _setSizeAndAggregate(node) {\r\n    if (!!node.children) {\r\n      node.aggregate = 0;\r\n      for (let child of node.children) node.aggregate += child.dataSize;\r\n      if (Number.isNaN(node.dataSize)) node.dataSize = node.aggregate;\r\n    } else {\r\n      if (Number.isNaN(node.dataSize)) node.dataSize = 1;\r\n      node.aggregate = node.dataSize;\r\n    }\r\n  }\r\n\r\n  _checkSize(node) {\r\n    if (node.dataSize < node.aggregate) {\r\n      // console.log('Error: Node has a smaller size than its children.');\r\n      // console.log(node);\r\n    }\r\n  }\r\n\r\n  // check if size of parent elements is bigger than the aggregate of the sizes of its children\r\n  _checkPositions(node) {\r\n    if (!!node.children) {\r\n      let minPos = 0;\r\n      for (let child of node.children) {\r\n        if (child.pos >= 0) {\r\n          if (minPos > child.pos) {\r\n            // console.log('Error: Children positions overlap each other.');\r\n            // console.log(node);\r\n          }\r\n          minPos = child.pos + child.dataSize;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  __forEachNodeDepthFirst(callback) {\r\n    let traverse = function(node, depth) {\r\n      if (!!node.children)\r\n        node.children.forEach(child => traverse(child, depth + 1));\r\n      callback(node, depth);\r\n    };\r\n\r\n    for (let t in this._timesteps) traverse(this._timesteps[t].tree, 0);\r\n  }\r\n\r\n  _createTimestep(t) {\r\n    this._timesteps[t] = {\r\n      references: {},\r\n      tree: null\r\n    };\r\n  }\r\n\r\n  // connect nodes which have the same ID in consecutive timesteps\r\n  buildTimeConnections() {\r\n    for (let t in this._timesteps) {\r\n      if (!!this._timesteps[+t + 1]) {\r\n        let nodes = this._timesteps[t].references;\r\n        let nodes2 = this._timesteps[+t + 1].references;\r\n        for (let id in nodes) {\r\n          if (!!nodes2[id]) {\r\n            // do not build connections if the nodes next elements were manually set\r\n            if (!nodes[id].next) nodes[id].next = [nodes2[id]];\r\n            if (!nodes2[id].prev) nodes2[id].prev = [nodes[id]];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/SplitStreamInputData.js\n"
          );

          /***/
        },

      /***/ './src/SvgPath.js':
        /*!************************!*\
  !*** ./src/SvgPath.js ***!
  \************************/
        /*! exports provided: default */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SvgPath; });\nconst ACTION = {\r\n  MOVE: 0,\r\n  MOVE_D: 1,\r\n  LINE: 2,\r\n  LINE_D: 3,\r\n  HORIZONTAL: 4,\r\n  HORIZONTAL_D: 5,\r\n  VERTICAL: 6,\r\n  VERTICAL_D: 7,\r\n  BEZIER: 8,\r\n  BEZIER_D: 9,\r\n  ARC: 10\r\n};\r\n\r\nclass SvgPath {\r\n  constructor() {\r\n    this._path = '';\r\n    this._x;\r\n    this._y;\r\n    this._precision = 2;\r\n    this._lastAction;\r\n  }\r\n\r\n  // ignore a change, if its end coordinate is the same as its current position\r\n  _pathWillChange(x, y) {\r\n    if (Number.isNaN(x) || Number.isNaN(y)); //debugger;\r\n    if (x !== this._x || y !== this._y) {\r\n      this._x = x;\r\n      this._y = y;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  _applyPrecision(...numbers) {\r\n    return numbers.map(d => +d.toFixed(this._precision));\r\n  }\r\n\r\n  get() {\r\n    return this._path;\r\n  }\r\n\r\n  move(x, y) {\r\n    [x, y] = this._applyPrecision(x, y);\r\n    if (this._pathWillChange(x, y)) {\r\n      if (this._lastAction == ACTION.MOVE)\r\n        // remove last move from string\r\n        this._path = this._path.slice(0, this._path.lastIndexOf('M'));\r\n      this._path += 'M ' + x + ' ' + y + ' ';\r\n      this._lastAction = ACTION.MOVE;\r\n    }\r\n  }\r\n\r\n  moveD(dx, dy) {\r\n    [dx, dy] = this._applyPrecision(dx, dy);\r\n    if (this._pathWillChange(this._x + dx, this._y + dy)) {\r\n      this._path += 'm ' + dx + ' ' + dy + ' ';\r\n      this._lastAction = ACTION.MOVE_D;\r\n    }\r\n  }\r\n\r\n  line(x, y) {\r\n    [x, y] = this._applyPrecision(x, y);\r\n    if (this._pathWillChange(x, y)) {\r\n      this._path += 'L ' + x + ' ' + y + ' ';\r\n      this._lastAction = ACTION.LINE;\r\n    }\r\n  }\r\n\r\n  lineD(dx, dy) {\r\n    [dx, dy] = this._applyPrecision(dx, dy);\r\n    if (this._pathWillChange(this._x + dx, this._y + dy)) {\r\n      this._path += 'l ' + dx + ' ' + dy + ' ';\r\n      this._lastAction = ACTION.LINE_D;\r\n    }\r\n  }\r\n\r\n  horizontal(x) {\r\n    [x] = this._applyPrecision(x);\r\n    if (this._pathWillChange(x, this._y)) {\r\n      if (this._lastAction == ACTION.HORIZONTAL)\r\n        // remove last move from string\r\n        this._path = this._path.slice(0, this._path.lastIndexOf('H'));\r\n      this._path += 'H ' + x + ' ';\r\n      this._lastAction = ACTION.HORIZONTAL;\r\n    }\r\n  }\r\n\r\n  horizontalD(dx) {\r\n    [dx] = this._applyPrecision(dx);\r\n    if (this._pathWillChange(this._x + dx, this._y)) {\r\n      this._path += 'h ' + dx + ' ';\r\n      this._lastAction = ACTION.HORIZONTAL_D;\r\n    }\r\n  }\r\n\r\n  vertical(y) {\r\n    [y] = this._applyPrecision(y);\r\n    if (this._pathWillChange(this._x, y)) {\r\n      if (this._lastAction == ACTION.VERTICAL)\r\n        // remove last move from string\r\n        this._path = this._path.slice(0, this._path.lastIndexOf('V'));\r\n      this._path += 'V ' + y + ' ';\r\n      this._lastAction = ACTION.VERTICAL;\r\n    }\r\n  }\r\n\r\n  verticalD(dy) {\r\n    [dy] = this._applyPrecision(dy);\r\n    if (this._pathWillChange(this._x, this._y + dy)) {\r\n      this._path += 'v ' + dy + ' ';\r\n      this._lastAction = ACTION.VERTICAL_D;\r\n    }\r\n  }\r\n\r\n  bezier(x1, y1, x2, y2, x, y) {\r\n    [x1, y1, x2, y2, x, y] = this._applyPrecision(x1, y1, x2, y2, x, y);\r\n    if (this._pathWillChange(x, y)) {\r\n      this._path +=\r\n        'C ' + x1 + ' ' + y1 + ', ' + x2 + ' ' + y2 + ', ' + x + ' ' + y + ' ';\r\n      this._lastAction = ACTION.BEZIER;\r\n    }\r\n  }\r\n\r\n  bezierD(dx1, dy1, dx2, dy2, dx, dy) {\r\n    [dx1, dy1, dx2, dy2, dx, dy] = this._applyPrecision(\r\n      dx1,\r\n      dy1,\r\n      dx2,\r\n      dy2,\r\n      dx,\r\n      dy\r\n    );\r\n    if (this._pathWillChange(this._x + dx, this._y + dy)) {\r\n      this._path +=\r\n        'c ' +\r\n        dx1 +\r\n        ' ' +\r\n        dy1 +\r\n        ', ' +\r\n        dx2 +\r\n        ' ' +\r\n        dy2 +\r\n        ', ' +\r\n        dx +\r\n        ' ' +\r\n        dy +\r\n        ' ';\r\n      this._lastAction = ACTION.BEZIER_D;\r\n    }\r\n  }\r\n\r\n  arc(rx, ry, rot, largeArcFlag, sweepFlag, x, y) {\r\n    [rx, ry, rot, largeArcFlag, sweepFlag, x, y] = this._applyPrecision(\r\n      rx,\r\n      ry,\r\n      rot,\r\n      largeArcFlag,\r\n      sweepFlag,\r\n      x,\r\n      y\r\n    );\r\n    if (this._pathWillChange(x, y)) {\r\n      this._path +=\r\n        'A ' +\r\n        rx +\r\n        ' ' +\r\n        ry +\r\n        ' ' +\r\n        rot +\r\n        ' ' +\r\n        largeArcFlag +\r\n        ' ' +\r\n        sweepFlag +\r\n        ' ' +\r\n        x +\r\n        ' ' +\r\n        y +\r\n        ' ';\r\n      this._lastAction = ACTION.ARC;\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this._path += 'Z';\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9zcmMvU3ZnUGF0aC5qcz9jYzc1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvU3ZnUGF0aC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFDVElPTiA9IHtcclxuICBNT1ZFOiAwLFxyXG4gIE1PVkVfRDogMSxcclxuICBMSU5FOiAyLFxyXG4gIExJTkVfRDogMyxcclxuICBIT1JJWk9OVEFMOiA0LFxyXG4gIEhPUklaT05UQUxfRDogNSxcclxuICBWRVJUSUNBTDogNixcclxuICBWRVJUSUNBTF9EOiA3LFxyXG4gIEJFWklFUjogOCxcclxuICBCRVpJRVJfRDogOSxcclxuICBBUkM6IDEwXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdmdQYXRoIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX3BhdGggPSAnJztcclxuICAgIHRoaXMuX3g7XHJcbiAgICB0aGlzLl95O1xyXG4gICAgdGhpcy5fcHJlY2lzaW9uID0gMjtcclxuICAgIHRoaXMuX2xhc3RBY3Rpb247XHJcbiAgfVxyXG5cclxuICAvLyBpZ25vcmUgYSBjaGFuZ2UsIGlmIGl0cyBlbmQgY29vcmRpbmF0ZSBpcyB0aGUgc2FtZSBhcyBpdHMgY3VycmVudCBwb3NpdGlvblxyXG4gIF9wYXRoV2lsbENoYW5nZSh4LCB5KSB7XHJcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHgpIHx8IE51bWJlci5pc05hTih5KSk7IC8vZGVidWdnZXI7XHJcbiAgICBpZiAoeCAhPT0gdGhpcy5feCB8fCB5ICE9PSB0aGlzLl95KSB7XHJcbiAgICAgIHRoaXMuX3ggPSB4O1xyXG4gICAgICB0aGlzLl95ID0geTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBfYXBwbHlQcmVjaXNpb24oLi4ubnVtYmVycykge1xyXG4gICAgcmV0dXJuIG51bWJlcnMubWFwKGQgPT4gK2QudG9GaXhlZCh0aGlzLl9wcmVjaXNpb24pKTtcclxuICB9XHJcblxyXG4gIGdldCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9wYXRoO1xyXG4gIH1cclxuXHJcbiAgbW92ZSh4LCB5KSB7XHJcbiAgICBbeCwgeV0gPSB0aGlzLl9hcHBseVByZWNpc2lvbih4LCB5KTtcclxuICAgIGlmICh0aGlzLl9wYXRoV2lsbENoYW5nZSh4LCB5KSkge1xyXG4gICAgICBpZiAodGhpcy5fbGFzdEFjdGlvbiA9PSBBQ1RJT04uTU9WRSlcclxuICAgICAgICAvLyByZW1vdmUgbGFzdCBtb3ZlIGZyb20gc3RyaW5nXHJcbiAgICAgICAgdGhpcy5fcGF0aCA9IHRoaXMuX3BhdGguc2xpY2UoMCwgdGhpcy5fcGF0aC5sYXN0SW5kZXhPZignTScpKTtcclxuICAgICAgdGhpcy5fcGF0aCArPSAnTSAnICsgeCArICcgJyArIHkgKyAnICc7XHJcbiAgICAgIHRoaXMuX2xhc3RBY3Rpb24gPSBBQ1RJT04uTU9WRTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdmVEKGR4LCBkeSkge1xyXG4gICAgW2R4LCBkeV0gPSB0aGlzLl9hcHBseVByZWNpc2lvbihkeCwgZHkpO1xyXG4gICAgaWYgKHRoaXMuX3BhdGhXaWxsQ2hhbmdlKHRoaXMuX3ggKyBkeCwgdGhpcy5feSArIGR5KSkge1xyXG4gICAgICB0aGlzLl9wYXRoICs9ICdtICcgKyBkeCArICcgJyArIGR5ICsgJyAnO1xyXG4gICAgICB0aGlzLl9sYXN0QWN0aW9uID0gQUNUSU9OLk1PVkVfRDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxpbmUoeCwgeSkge1xyXG4gICAgW3gsIHldID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oeCwgeSk7XHJcbiAgICBpZiAodGhpcy5fcGF0aFdpbGxDaGFuZ2UoeCwgeSkpIHtcclxuICAgICAgdGhpcy5fcGF0aCArPSAnTCAnICsgeCArICcgJyArIHkgKyAnICc7XHJcbiAgICAgIHRoaXMuX2xhc3RBY3Rpb24gPSBBQ1RJT04uTElORTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxpbmVEKGR4LCBkeSkge1xyXG4gICAgW2R4LCBkeV0gPSB0aGlzLl9hcHBseVByZWNpc2lvbihkeCwgZHkpO1xyXG4gICAgaWYgKHRoaXMuX3BhdGhXaWxsQ2hhbmdlKHRoaXMuX3ggKyBkeCwgdGhpcy5feSArIGR5KSkge1xyXG4gICAgICB0aGlzLl9wYXRoICs9ICdsICcgKyBkeCArICcgJyArIGR5ICsgJyAnO1xyXG4gICAgICB0aGlzLl9sYXN0QWN0aW9uID0gQUNUSU9OLkxJTkVfRDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhvcml6b250YWwoeCkge1xyXG4gICAgW3hdID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oeCk7XHJcbiAgICBpZiAodGhpcy5fcGF0aFdpbGxDaGFuZ2UoeCwgdGhpcy5feSkpIHtcclxuICAgICAgaWYgKHRoaXMuX2xhc3RBY3Rpb24gPT0gQUNUSU9OLkhPUklaT05UQUwpXHJcbiAgICAgICAgLy8gcmVtb3ZlIGxhc3QgbW92ZSBmcm9tIHN0cmluZ1xyXG4gICAgICAgIHRoaXMuX3BhdGggPSB0aGlzLl9wYXRoLnNsaWNlKDAsIHRoaXMuX3BhdGgubGFzdEluZGV4T2YoJ0gnKSk7XHJcbiAgICAgIHRoaXMuX3BhdGggKz0gJ0ggJyArIHggKyAnICc7XHJcbiAgICAgIHRoaXMuX2xhc3RBY3Rpb24gPSBBQ1RJT04uSE9SSVpPTlRBTDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhvcml6b250YWxEKGR4KSB7XHJcbiAgICBbZHhdID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oZHgpO1xyXG4gICAgaWYgKHRoaXMuX3BhdGhXaWxsQ2hhbmdlKHRoaXMuX3ggKyBkeCwgdGhpcy5feSkpIHtcclxuICAgICAgdGhpcy5fcGF0aCArPSAnaCAnICsgZHggKyAnICc7XHJcbiAgICAgIHRoaXMuX2xhc3RBY3Rpb24gPSBBQ1RJT04uSE9SSVpPTlRBTF9EO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmVydGljYWwoeSkge1xyXG4gICAgW3ldID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oeSk7XHJcbiAgICBpZiAodGhpcy5fcGF0aFdpbGxDaGFuZ2UodGhpcy5feCwgeSkpIHtcclxuICAgICAgaWYgKHRoaXMuX2xhc3RBY3Rpb24gPT0gQUNUSU9OLlZFUlRJQ0FMKVxyXG4gICAgICAgIC8vIHJlbW92ZSBsYXN0IG1vdmUgZnJvbSBzdHJpbmdcclxuICAgICAgICB0aGlzLl9wYXRoID0gdGhpcy5fcGF0aC5zbGljZSgwLCB0aGlzLl9wYXRoLmxhc3RJbmRleE9mKCdWJykpO1xyXG4gICAgICB0aGlzLl9wYXRoICs9ICdWICcgKyB5ICsgJyAnO1xyXG4gICAgICB0aGlzLl9sYXN0QWN0aW9uID0gQUNUSU9OLlZFUlRJQ0FMO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmVydGljYWxEKGR5KSB7XHJcbiAgICBbZHldID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oZHkpO1xyXG4gICAgaWYgKHRoaXMuX3BhdGhXaWxsQ2hhbmdlKHRoaXMuX3gsIHRoaXMuX3kgKyBkeSkpIHtcclxuICAgICAgdGhpcy5fcGF0aCArPSAndiAnICsgZHkgKyAnICc7XHJcbiAgICAgIHRoaXMuX2xhc3RBY3Rpb24gPSBBQ1RJT04uVkVSVElDQUxfRDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGJlemllcih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xyXG4gICAgW3gxLCB5MSwgeDIsIHkyLCB4LCB5XSA9IHRoaXMuX2FwcGx5UHJlY2lzaW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KTtcclxuICAgIGlmICh0aGlzLl9wYXRoV2lsbENoYW5nZSh4LCB5KSkge1xyXG4gICAgICB0aGlzLl9wYXRoICs9XHJcbiAgICAgICAgJ0MgJyArIHgxICsgJyAnICsgeTEgKyAnLCAnICsgeDIgKyAnICcgKyB5MiArICcsICcgKyB4ICsgJyAnICsgeSArICcgJztcclxuICAgICAgdGhpcy5fbGFzdEFjdGlvbiA9IEFDVElPTi5CRVpJRVI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBiZXppZXJEKGR4MSwgZHkxLCBkeDIsIGR5MiwgZHgsIGR5KSB7XHJcbiAgICBbZHgxLCBkeTEsIGR4MiwgZHkyLCBkeCwgZHldID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oXHJcbiAgICAgIGR4MSxcclxuICAgICAgZHkxLFxyXG4gICAgICBkeDIsXHJcbiAgICAgIGR5MixcclxuICAgICAgZHgsXHJcbiAgICAgIGR5XHJcbiAgICApO1xyXG4gICAgaWYgKHRoaXMuX3BhdGhXaWxsQ2hhbmdlKHRoaXMuX3ggKyBkeCwgdGhpcy5feSArIGR5KSkge1xyXG4gICAgICB0aGlzLl9wYXRoICs9XHJcbiAgICAgICAgJ2MgJyArXHJcbiAgICAgICAgZHgxICtcclxuICAgICAgICAnICcgK1xyXG4gICAgICAgIGR5MSArXHJcbiAgICAgICAgJywgJyArXHJcbiAgICAgICAgZHgyICtcclxuICAgICAgICAnICcgK1xyXG4gICAgICAgIGR5MiArXHJcbiAgICAgICAgJywgJyArXHJcbiAgICAgICAgZHggK1xyXG4gICAgICAgICcgJyArXHJcbiAgICAgICAgZHkgK1xyXG4gICAgICAgICcgJztcclxuICAgICAgdGhpcy5fbGFzdEFjdGlvbiA9IEFDVElPTi5CRVpJRVJfRDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFyYyhyeCwgcnksIHJvdCwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcclxuICAgIFtyeCwgcnksIHJvdCwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHldID0gdGhpcy5fYXBwbHlQcmVjaXNpb24oXHJcbiAgICAgIHJ4LFxyXG4gICAgICByeSxcclxuICAgICAgcm90LFxyXG4gICAgICBsYXJnZUFyY0ZsYWcsXHJcbiAgICAgIHN3ZWVwRmxhZyxcclxuICAgICAgeCxcclxuICAgICAgeVxyXG4gICAgKTtcclxuICAgIGlmICh0aGlzLl9wYXRoV2lsbENoYW5nZSh4LCB5KSkge1xyXG4gICAgICB0aGlzLl9wYXRoICs9XHJcbiAgICAgICAgJ0EgJyArXHJcbiAgICAgICAgcnggK1xyXG4gICAgICAgICcgJyArXHJcbiAgICAgICAgcnkgK1xyXG4gICAgICAgICcgJyArXHJcbiAgICAgICAgcm90ICtcclxuICAgICAgICAnICcgK1xyXG4gICAgICAgIGxhcmdlQXJjRmxhZyArXHJcbiAgICAgICAgJyAnICtcclxuICAgICAgICBzd2VlcEZsYWcgK1xyXG4gICAgICAgICcgJyArXHJcbiAgICAgICAgeCArXHJcbiAgICAgICAgJyAnICtcclxuICAgICAgICB5ICtcclxuICAgICAgICAnICc7XHJcbiAgICAgIHRoaXMuX2xhc3RBY3Rpb24gPSBBQ1RJT04uQVJDO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wYXRoICs9ICdaJztcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/SvgPath.js\n"
          );

          /***/
        },

      /***/ './src/TransformData.js':
        /*!******************************!*\
  !*** ./src/TransformData.js ***!
  \******************************/
        /*! exports provided: default */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SplitStreamInputData.js */ \"./src/SplitStreamInputData.js\");\n\r\n\r\nconst TransformData = {\r\n  viscous: function(data) {\r\n    let format = new _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    // add nodes\r\n    for (let id in data.N) {\r\n      let node = data.N[id];\r\n      format.addNode(node.t, id, node.w);\r\n    }\r\n    // add tree structure\r\n    for (let t in data.EN) {\r\n      for (let id in data.EN[t]) {\r\n        let childArray = data.EN[t][id];\r\n        for (let childId of childArray) {\r\n          format.addParent(t, childId, id);\r\n        }\r\n      }\r\n    }\r\n    // add timeline\r\n    for (let stream in data.ET) {\r\n      for (let nodeId in data.ET[stream]) {\r\n        let t = data.N[nodeId].t;\r\n        for (let nextId of data.ET[stream][nodeId]) {\r\n          format.addNext(t, nodeId, nextId);\r\n        }\r\n      }\r\n    }\r\n\r\n    format.finalize();\r\n    return format;\r\n  },\r\n\r\n  gumtree: function(data) {\r\n    let format = new _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    let idx = 0;\r\n\r\n    // follow the data format's post-order DFS approach\r\n    let traverse = (t, node) => {\r\n      if (!!node.children)\r\n        for (let i = 0; i < node.children.length; i++)\r\n          traverse(t, node.children[i]);\r\n\r\n      node.id = idx++;\r\n      format.addNode(t, node.id, node.length, node.pos, {\r\n        label: node.label,\r\n        type: node.type,\r\n        typeLabel: node.typeLabel\r\n      });\r\n\r\n      // children need to be added in a second step, becaues ID is not known beforehand\r\n      if (!!node.children)\r\n        for (let i = 0; i < node.children.length; i++)\r\n          format.addParent(t, node.children[i].id, node.id);\r\n    };\r\n\r\n    for (let t in data.timesteps) {\r\n      idx = 0;\r\n      // add nodes and tree structure\r\n      traverse(t, data.timesteps[t].root);\r\n\r\n      // add timeline (start with second, because data needs to be written before being modified)\r\n      if (t > 0) {\r\n        if (!!data.changes[t - 1].matches)\r\n          for (let match of data.changes[t - 1].matches) {\r\n            format.addNext(t - 1, match.src, match.dest);\r\n          }\r\n\r\n        // find added, deleted nodes\r\n        // if (!!data.changes[t-1].actions)\r\n        // \tfor (let action of data.changes[t-1].actions) {\r\n        // \t\tif (action.action == \"delete\")\r\n        // \t\t\tcurrentTimestep.deleted[action.tree] = previousTimestep.references[action.tree];\r\n\r\n        // \t\t/*if (action.action == \"insert\") {\r\n        // \t\t\tcurrentTimestep.references[action.tree].insertAt = action.at;\r\n        // \t\t}*/\r\n        //     }\r\n      }\r\n    }\r\n\r\n    format.finalize();\r\n    return format;\r\n  },\r\n\r\n  titan: function(data) {\r\n    let format = new _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    let t = -1;\r\n    let lastDate;\r\n    for (let entry of data) {\r\n      // when timestamp changes, create a new timestep\r\n      if (entry['observation_time'] != lastDate) {\r\n        lastDate = entry['observation_time'];\r\n        t++;\r\n      }\r\n      format.addNode(t, entry.id, +entry['cell_volume (km3)']);\r\n    }\r\n\r\n    t = -1;\r\n    for (let entry of data) {\r\n      if (entry['observation_time'] != lastDate) {\r\n        lastDate = entry['observation_time'];\r\n        t++;\r\n      }\r\n      let children = entry['IDs of children '];\r\n      if (!!children) {\r\n        if (typeof children == 'string') {\r\n          let next = children.split(', ');\r\n          if (next[0] != '')\r\n            next.forEach(nextId => format.addNext(t, entry.id, nextId));\r\n        } // single ID as number\r\n        else format.addNext(t, entry.id, children);\r\n      }\r\n    }\r\n\r\n    format.finalize();\r\n    return format;\r\n  },\r\n\r\n  allen: function(data) {\r\n    let format = new _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](/*{forceFakeRoot: true}*/);\r\n    let timesteps = {\r\n      '2': 0,\r\n      '3': 1,\r\n      '5': 2,\r\n      '6': 3,\r\n      '7': 4,\r\n      '8': 5\r\n    };\r\n    let time = t => timesteps[t];\r\n\r\n    for (let structureId in data) {\r\n      let structure = data[structureId];\r\n      for (let step in structure.timesteps) {\r\n        let { id, timesteps, name, acronym, color, parent } = structure;\r\n        format.addNode(time(step), id, timesteps[step], undefined, {\r\n          name,\r\n          acronym,\r\n          color\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let structureId in data) {\r\n      let structure = data[structureId];\r\n      for (let step in structure.timesteps) {\r\n        let { id, timesteps, name, acronym, color, parent } = structure;\r\n        format.addParent(time(step), id, parent);\r\n      }\r\n    }\r\n\r\n    format.buildTimeConnections();\r\n    format.finalize();\r\n    return format;\r\n  },\r\n\r\n  storyline: function(data) {\r\n    let format = new _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    const characters = [];\r\n    const locations = [];\r\n    for (let char of data.characters)\r\n      characters[char.id] = char.name.replace(/\\s+/g, '');\r\n    for (let loc of data.locations)\r\n      locations[loc.id] = loc.name.replace(/\\s+/g, '');\r\n\r\n    for (let session of data.sessions) {\r\n      for (let t = session.start; t < session.end; t++) {\r\n        format.addNode(\r\n          t,\r\n          locations[session.location],\r\n          undefined,\r\n          undefined,\r\n          locations[session.location]\r\n        );\r\n        for (let member of session.members) {\r\n          format.addNode(\r\n            t,\r\n            characters[member],\r\n            undefined,\r\n            undefined,\r\n            characters[member]\r\n          );\r\n          format.addParent(t, characters[member], locations[session.location]);\r\n        }\r\n      }\r\n    }\r\n\r\n    format.buildTimeConnections();\r\n    format.finalize();\r\n    return format;\r\n  },\r\n\r\n  treemap: function(data) {\r\n    let format = new _SplitStreamInputData_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n    for (let entry of data) {\r\n      let id = entry[0];\r\n      let parentId = entry[1];\r\n      for (let t = 2; t < entry.length; t++) {\r\n        if (entry[t] > 0) {\r\n          format.addNode(t, id, entry[t]);\r\n          format.addNode(t, parentId);\r\n          format.addParent(t, id, parentId);\r\n        }\r\n      }\r\n    }\r\n    format.buildTimeConnections();\r\n    format.finalize();\r\n    return format;\r\n  }\r\n};\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (TransformData);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/TransformData.js\n"
          );

          /***/
        },

      /***/ './src/functions.js':
        /*!**************************!*\
  !*** ./src/functions.js ***!
  \**************************/
        /*! exports provided: loadJSON, getRandomColor, saveSvg, savePng, saveJson, addLoadingSpinner, removeLoadingSpinner */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadJSON\", function() { return loadJSON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRandomColor\", function() { return getRandomColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saveSvg\", function() { return saveSvg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"savePng\", function() { return savePng; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"saveJson\", function() { return saveJson; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addLoadingSpinner\", function() { return addLoadingSpinner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeLoadingSpinner\", function() { return removeLoadingSpinner; });\n/* harmony import */ var save_svg_as_png__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! save-svg-as-png */ \"./node_modules/save-svg-as-png/lib/saveSvgAsPng.js\");\n/* harmony import */ var save_svg_as_png__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(save_svg_as_png__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\nfunction loadJSON(file, callback) {\r\n  var xobj = new XMLHttpRequest();\r\n  xobj.overrideMimeType('application/json');\r\n  xobj.open('GET', file, true); // Replace 'my_data' with the path to your file\r\n  xobj.onreadystatechange = function() {\r\n    if (xobj.readyState == 4 && xobj.status == '200') {\r\n      // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\r\n      callback(xobj.responseText);\r\n    }\r\n  };\r\n  xobj.send(null);\r\n}\r\n\r\nfunction getRandomColor() {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\n/* Modified from https://stackoverflow.com/questions/23218174/how-do-i-save-export-an-svg-file-after-creating-an-svg-with-d3-js-ie-safari-an */\r\nfunction saveSvg(svgEl, name) {\r\n  svgEl.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n  var svgData = svgEl.outerHTML;\r\n  var preface = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n';\r\n  var svgBlob = new Blob([preface, svgData], {\r\n    type: 'image/svg+xml;charset=utf-8'\r\n  });\r\n  var svgUrl = URL.createObjectURL(svgBlob);\r\n  var downloadLink = document.createElement('a');\r\n  downloadLink.href = svgUrl;\r\n  downloadLink.download = name + '.svg';\r\n  document.body.appendChild(downloadLink);\r\n  downloadLink.click();\r\n  document.body.removeChild(downloadLink);\r\n}\r\n\r\nasync function savePng(svgEl, name) {\r\n  // store image in 16K+ res\r\n  // this can take a lot of time\r\n  addLoadingSpinner(document.querySelector('#wrapper'));\r\n  let scaleFactor = Math.ceil(15360 / svgEl.clientWidth);\r\n  await save_svg_as_png__WEBPACK_IMPORTED_MODULE_0__[\"saveSvgAsPng\"](svgEl, name + '.png', {\r\n    backgroundColor: 'white',\r\n    encoderOptions: 1,\r\n    scale: scaleFactor\r\n  });\r\n  removeLoadingSpinner(document.querySelector('#wrapper'));\r\n}\r\n\r\n/* Modified from https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser */\r\nfunction saveJson(exportObj, exportName) {\r\n  var dataStr =\r\n    'data:text/json;charset=utf-8,' +\r\n    encodeURIComponent(JSON.stringify(exportObj));\r\n  var downloadAnchorNode = document.createElement('a');\r\n  downloadAnchorNode.setAttribute('href', dataStr);\r\n  downloadAnchorNode.setAttribute('download', exportName + '.json');\r\n  document.body.appendChild(downloadAnchorNode); // required for firefox\r\n  downloadAnchorNode.click();\r\n  downloadAnchorNode.remove();\r\n}\r\n\r\nfunction addLoadingSpinner(div) {\r\n  if (!div) {\r\n    console.log('addLoadingSpinner: div does not exist');\r\n    return;\r\n  }\r\n\r\n  if (!div.classList.contains('loading')) {\r\n    div.classList.add('loading');\r\n\r\n    let loader = document.createElement('div');\r\n    loader.classList = 'loader';\r\n    loader.style.top = div.scrollTop + 'px'; // position it correctly on scrollable divs\r\n    loader.onscroll = function(e) {\r\n      e.preventDefault();\r\n    };\r\n    div.appendChild(loader);\r\n\r\n    let spinner = document.createElement('div');\r\n    spinner.classList = 'spinner';\r\n    let size =\r\n      0.3 *\r\n      (loader.clientHeight > loader.clientWidth\r\n        ? loader.clientWidth\r\n        : loader.clientHeight);\r\n    spinner.style.width = size + 'px';\r\n    spinner.style.height = size + 'px';\r\n    spinner.style.borderWidth = 0.1 * size + 'px';\r\n    loader.appendChild(spinner);\r\n  }\r\n}\r\n\r\nfunction removeLoadingSpinner(div) {\r\n  if (!div) return;\r\n\r\n  let loader = div.querySelector('.loader');\r\n  if (!!loader) {\r\n    div.removeChild(loader);\r\n    div.classList.remove('loading');\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9zcmMvZnVuY3Rpb25zLmpzPzlmMjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUM7O0FBRWhDO0FBQ1A7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw0REFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDTztBQUNQO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL3NyYy9mdW5jdGlvbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzdmcgZnJvbSAnc2F2ZS1zdmctYXMtcG5nJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSlNPTihmaWxlLCBjYWxsYmFjaykge1xyXG4gIHZhciB4b2JqID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgeG9iai5vdmVycmlkZU1pbWVUeXBlKCdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgeG9iai5vcGVuKCdHRVQnLCBmaWxlLCB0cnVlKTsgLy8gUmVwbGFjZSAnbXlfZGF0YScgd2l0aCB0aGUgcGF0aCB0byB5b3VyIGZpbGVcclxuICB4b2JqLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHhvYmoucmVhZHlTdGF0ZSA9PSA0ICYmIHhvYmouc3RhdHVzID09ICcyMDAnKSB7XHJcbiAgICAgIC8vIFJlcXVpcmVkIHVzZSBvZiBhbiBhbm9ueW1vdXMgY2FsbGJhY2sgYXMgLm9wZW4gd2lsbCBOT1QgcmV0dXJuIGEgdmFsdWUgYnV0IHNpbXBseSByZXR1cm5zIHVuZGVmaW5lZCBpbiBhc3luY2hyb25vdXMgbW9kZVxyXG4gICAgICBjYWxsYmFjayh4b2JqLnJlc3BvbnNlVGV4dCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICB4b2JqLnNlbmQobnVsbCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpIHtcclxuICB2YXIgbGV0dGVycyA9ICcwMTIzNDU2Nzg5QUJDREVGJztcclxuICB2YXIgY29sb3IgPSAnIyc7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuICAgIGNvbG9yICs9IGxldHRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXTtcclxuICB9XHJcbiAgcmV0dXJuIGNvbG9yO1xyXG59XHJcblxyXG4vKiBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIzMjE4MTc0L2hvdy1kby1pLXNhdmUtZXhwb3J0LWFuLXN2Zy1maWxlLWFmdGVyLWNyZWF0aW5nLWFuLXN2Zy13aXRoLWQzLWpzLWllLXNhZmFyaS1hbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVN2ZyhzdmdFbCwgbmFtZSkge1xyXG4gIHN2Z0VsLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcclxuICB2YXIgc3ZnRGF0YSA9IHN2Z0VsLm91dGVySFRNTDtcclxuICB2YXIgcHJlZmFjZSA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgc3RhbmRhbG9uZT1cIm5vXCI/Plxcclxcbic7XHJcbiAgdmFyIHN2Z0Jsb2IgPSBuZXcgQmxvYihbcHJlZmFjZSwgc3ZnRGF0YV0sIHtcclxuICAgIHR5cGU6ICdpbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgnXHJcbiAgfSk7XHJcbiAgdmFyIHN2Z1VybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoc3ZnQmxvYik7XHJcbiAgdmFyIGRvd25sb2FkTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICBkb3dubG9hZExpbmsuaHJlZiA9IHN2Z1VybDtcclxuICBkb3dubG9hZExpbmsuZG93bmxvYWQgPSBuYW1lICsgJy5zdmcnO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRMaW5rKTtcclxuICBkb3dubG9hZExpbmsuY2xpY2soKTtcclxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRvd25sb2FkTGluayk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlUG5nKHN2Z0VsLCBuYW1lKSB7XHJcbiAgLy8gc3RvcmUgaW1hZ2UgaW4gMTZLKyByZXNcclxuICAvLyB0aGlzIGNhbiB0YWtlIGEgbG90IG9mIHRpbWVcclxuICBhZGRMb2FkaW5nU3Bpbm5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd3JhcHBlcicpKTtcclxuICBsZXQgc2NhbGVGYWN0b3IgPSBNYXRoLmNlaWwoMTUzNjAgLyBzdmdFbC5jbGllbnRXaWR0aCk7XHJcbiAgYXdhaXQgc3ZnLnNhdmVTdmdBc1BuZyhzdmdFbCwgbmFtZSArICcucG5nJywge1xyXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxyXG4gICAgZW5jb2Rlck9wdGlvbnM6IDEsXHJcbiAgICBzY2FsZTogc2NhbGVGYWN0b3JcclxuICB9KTtcclxuICByZW1vdmVMb2FkaW5nU3Bpbm5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd3JhcHBlcicpKTtcclxufVxyXG5cclxuLyogTW9kaWZpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xOTcyMTQzOS9kb3dubG9hZC1qc29uLW9iamVjdC1hcy1hLWZpbGUtZnJvbS1icm93c2VyICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlSnNvbihleHBvcnRPYmosIGV4cG9ydE5hbWUpIHtcclxuICB2YXIgZGF0YVN0ciA9XHJcbiAgICAnZGF0YTp0ZXh0L2pzb247Y2hhcnNldD11dGYtOCwnICtcclxuICAgIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShleHBvcnRPYmopKTtcclxuICB2YXIgZG93bmxvYWRBbmNob3JOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gIGRvd25sb2FkQW5jaG9yTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBkYXRhU3RyKTtcclxuICBkb3dubG9hZEFuY2hvck5vZGUuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIGV4cG9ydE5hbWUgKyAnLmpzb24nKTtcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvd25sb2FkQW5jaG9yTm9kZSk7IC8vIHJlcXVpcmVkIGZvciBmaXJlZm94XHJcbiAgZG93bmxvYWRBbmNob3JOb2RlLmNsaWNrKCk7XHJcbiAgZG93bmxvYWRBbmNob3JOb2RlLnJlbW92ZSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkTG9hZGluZ1NwaW5uZXIoZGl2KSB7XHJcbiAgaWYgKCFkaXYpIHtcclxuICAgIGNvbnNvbGUubG9nKCdhZGRMb2FkaW5nU3Bpbm5lcjogZGl2IGRvZXMgbm90IGV4aXN0Jyk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIWRpdi5jbGFzc0xpc3QuY29udGFpbnMoJ2xvYWRpbmcnKSkge1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2xvYWRpbmcnKTtcclxuXHJcbiAgICBsZXQgbG9hZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBsb2FkZXIuY2xhc3NMaXN0ID0gJ2xvYWRlcic7XHJcbiAgICBsb2FkZXIuc3R5bGUudG9wID0gZGl2LnNjcm9sbFRvcCArICdweCc7IC8vIHBvc2l0aW9uIGl0IGNvcnJlY3RseSBvbiBzY3JvbGxhYmxlIGRpdnNcclxuICAgIGxvYWRlci5vbnNjcm9sbCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfTtcclxuICAgIGRpdi5hcHBlbmRDaGlsZChsb2FkZXIpO1xyXG5cclxuICAgIGxldCBzcGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBzcGlubmVyLmNsYXNzTGlzdCA9ICdzcGlubmVyJztcclxuICAgIGxldCBzaXplID1cclxuICAgICAgMC4zICpcclxuICAgICAgKGxvYWRlci5jbGllbnRIZWlnaHQgPiBsb2FkZXIuY2xpZW50V2lkdGhcclxuICAgICAgICA/IGxvYWRlci5jbGllbnRXaWR0aFxyXG4gICAgICAgIDogbG9hZGVyLmNsaWVudEhlaWdodCk7XHJcbiAgICBzcGlubmVyLnN0eWxlLndpZHRoID0gc2l6ZSArICdweCc7XHJcbiAgICBzcGlubmVyLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnO1xyXG4gICAgc3Bpbm5lci5zdHlsZS5ib3JkZXJXaWR0aCA9IDAuMSAqIHNpemUgKyAncHgnO1xyXG4gICAgbG9hZGVyLmFwcGVuZENoaWxkKHNwaW5uZXIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxvYWRpbmdTcGlubmVyKGRpdikge1xyXG4gIGlmICghZGl2KSByZXR1cm47XHJcblxyXG4gIGxldCBsb2FkZXIgPSBkaXYucXVlcnlTZWxlY3RvcignLmxvYWRlcicpO1xyXG4gIGlmICghIWxvYWRlcikge1xyXG4gICAgZGl2LnJlbW92ZUNoaWxkKGxvYWRlcik7XHJcbiAgICBkaXYuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGluZycpO1xyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/functions.js\n"
          );

          /***/
        },

      /***/ './src/lib.js':
        /*!********************!*\
  !*** ./src/lib.js ***!
  \********************/
        /*! exports provided: SplitStream, SplitStreamInputData, SplitStreamFilter, TransformData */
        /***/ function(module, __webpack_exports__, __webpack_require__) {
          'use strict';
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SplitStream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SplitStream */ "./src/SplitStream.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitStream", function() { return _SplitStream__WEBPACK_IMPORTED_MODULE_0__["default"]; });\n\n/* harmony import */ var _SplitStreamInputData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SplitStreamInputData */ "./src/SplitStreamInputData.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitStreamInputData", function() { return _SplitStreamInputData__WEBPACK_IMPORTED_MODULE_1__["default"]; });\n\n/* harmony import */ var _SplitStreamFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SplitStreamFilter */ "./src/SplitStreamFilter.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SplitStreamFilter", function() { return _SplitStreamFilter__WEBPACK_IMPORTED_MODULE_2__["default"]; });\n\n/* harmony import */ var _TransformData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TransformData */ "./src/TransformData.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransformData", function() { return _TransformData__WEBPACK_IMPORTED_MODULE_3__["default"]; });\n\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvLi9zcmMvbGliLmpzPzM0ZTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBd0M7QUFDa0I7QUFDTjtBQUNSOztBQUVtQyIsImZpbGUiOiIuL3NyYy9saWIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3BsaXRTdHJlYW0gZnJvbSBcIi4vU3BsaXRTdHJlYW1cIjtcclxuaW1wb3J0IFNwbGl0U3RyZWFtSW5wdXREYXRhIGZyb20gXCIuL1NwbGl0U3RyZWFtSW5wdXREYXRhXCI7XHJcbmltcG9ydCBTcGxpdFN0cmVhbUZpbHRlciBmcm9tIFwiLi9TcGxpdFN0cmVhbUZpbHRlclwiO1xyXG5pbXBvcnQgVHJhbnNmb3JtRGF0YSBmcm9tIFwiLi9UcmFuc2Zvcm1EYXRhXCI7XHJcblxyXG5leHBvcnQgeyBTcGxpdFN0cmVhbSwgU3BsaXRTdHJlYW1JbnB1dERhdGEsIFNwbGl0U3RyZWFtRmlsdGVyLCBUcmFuc2Zvcm1EYXRhIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib.js\n'
          );

          /***/
        },

      /***/ d3:
        /*!*********************!*\
  !*** external "d3" ***!
  \*********************/
        /*! no static exports found */
        /***/ function(module, exports) {
          eval(
            'module.exports = __WEBPACK_EXTERNAL_MODULE_d3__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGxpdFN0cmVhbXMvZXh0ZXJuYWwgXCJkM1wiPzQzNjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiZDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfZDNfXzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///d3\n'
          );

          /***/
        }

      /******/
    }
  );
});
